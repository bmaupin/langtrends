{"version":3,"sources":["helpers/ApiHelper.js","helpers/LanguagesChart.js","helpers/TopLanguagesChart.js","helpers/FastestGrowingLanguagesChart.js","helpers/MostGrowthLanguages.js","helpers/ChartData.js","helpers/D3SigmoidCurve.js","components/Chart.js","components/ChartBottomMenu.js","components/ChartTopMenu.js","components/ChartGroup.js","components/TopMenu.js","components/App.js","registerServiceWorker.js","index.js"],"names":["settings","require","API_TOKEN","process","ApiHelper","intervalInMonths","numberOfDates","dates","_getLatestDateFromApi","currentDate","_getEarliestDateFromApi","earliestDate","i","push","_subtractMonthsUTC","reverse","apiFilter","order","limit","callApi","scoresFromApi","Date","date","bypassCache","monthsToSubtract","newDate","setUTCMonth","getUTCMonth","filter","apiUrl","encodeURI","concat","JSON","stringify","window","self","fetch","response","_getCache","cache","match","add","json","currentYearMonthString","_getCurrentYearMonthString","caches","has","open","_getLatestYearMonthStringFromApi","latestYearMonthString","_isApiFinishedSyncing","_deleteAllCaches","yearMonthString","_getNumberOfLanguagesFromApi","_getTotalNumberOfLanguages","where","count","languages","Object","keys","reduce","numberOfIncludedLanguages","languageName","include","toISOString","slice","cacheName","delete","or","map","LanguagesChart","interval","classCallCheck","this","_interval","_getDatesForCalculations","_dates","buildDates","datesForCalculations","getAllScores","scoresByDate","_organizeScoresByDate","customScoresByDate","_getCustomScoresByDate","getDates","datesForChart","_calculateTopScores","topCustomScores","_formatDataForChart","formattedSeriesData","length","previousDate","minimumScore","customScore","_calculateCustomScore","_convertNonFiniteToNull","topScores","formattedScores","allTopLanguages","_getAllTopLanguages","_iterator","Symbol","iterator","_iteratorNormalCompletion","_step","next","done","value","title","data","formattedScoresIndex","_iterator2","_iteratorNormalCompletion2","_step2","score","rank","hasOwnProperty","indexOf","x","y","hintTitle","hintValue","_formatHintValue","scores","language","name","points","number","Number","isFinite","sortedKeys","sort","a","b","numberOfLanguages","_loop","includes","TopLanguagesChart","_oldValue","newValue","FastestGrowingLanguagesChart","oldValue","Math","round","MostGrowthLanguages","ChartData","series","_series","chartType","CHART_TYPES","FASTEST_GROWTH","MOST_GROWTH","TOP_LANGUAGES","chart","Error","getSeries","D3SigmoidCurve","context","compression","_context","_compression","prototype","areaStart","_line","areaEnd","NaN","lineStart","_point","lineEnd","closePath","point","lineTo","moveTo","that","bezierCurveTo","_prevX","_prevY","helpers_D3SigmoidCurve","custom","cardinal","Chart","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","chartData","hoveredSeriesIndex","_onValueMouseOut","bind","assertThisInitialized","_onValueMouseOver","_xAxisLabelFormatter","setChartData","prevProps","fromType","leftYAxisLabels","_generateLeftYAxisLabels","rightYAxisLabels","_generateRightYAxisLabels","setState","index","_value","_formatDateForLabel","_this2","d3sigmoidcurve","react_default","createElement","className","es","height","margin","left","right","yDomain","tickFormat","tickTotal","orientation","v","entry","curve","getNull","d","key","color","GitHubColors","get","opacity","onValueMouseOut","onValueMouseOver","datapoint","strokeWidth","lineStyle","pointerEvents","format","_formatHint","renderLoadingSpinner","languageData","Dimmer","Dimmable","blurring","dimmed","active","inverted","Loader","size","Image","src","Component","ChartBottomMenu","Menu","secondary","Item","onClick","handleItemClick","ChartTopMenu","ChartGroup","handleChartTypeChanged","handleIntervalChanged","_event","_ref","_ref2","Container","Grid","centered","padded","Group","Content","Chart_Chart","TopMenu","attached","borderless","fitted","header","position","href","icon","Icon","App","TopMenu_TopMenu","ChartGroup_ChartGroup","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","components_App","document","getElementById","URL","origin","addEventListener","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.32f72b6d.chunk.js","sourcesContent":["const settings = require('../settings.json');\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3000';\nconst API_TOKEN = process.env.REACT_APP_API_TOKEN || null;\n\nclass ApiHelper {\n  static async buildDates(intervalInMonths, numberOfDates = settings.numberOfDates) {\n    let dates = [];\n    let currentDate = await ApiHelper._getLatestDateFromApi();\n    let earliestDate = await ApiHelper._getEarliestDateFromApi();\n\n    for (let i = 0; i < numberOfDates; i++) {\n      if (currentDate <= earliestDate) {\n        break;\n      }\n\n      dates.push(currentDate);\n      currentDate = ApiHelper._subtractMonthsUTC(currentDate, intervalInMonths);\n    }\n\n    return dates.reverse();\n  }\n\n  static async _getEarliestDateFromApi() {\n    const apiFilter = {\n      order: 'date ASC',\n      limit: 1\n    };\n    let scoresFromApi = await ApiHelper.callApi(apiFilter);\n\n    return new Date(scoresFromApi[0].date);\n  }\n\n  static async _getLatestDateFromApi(bypassCache) {\n    const apiFilter = {\n      order: 'date DESC',\n      limit: 1\n    };\n    let scoresFromApi = await ApiHelper.callApi(apiFilter, bypassCache);\n\n    return new Date(scoresFromApi[0].date);\n  }\n\n  static _subtractMonthsUTC(date, monthsToSubtract) {\n    let newDate = new Date(date);\n    newDate.setUTCMonth(newDate.getUTCMonth() - monthsToSubtract);\n    return newDate;\n  }\n\n  static async callApi(filter, bypassCache) {\n    const apiUrl = encodeURI(`${API_BASE_URL}/api/scores?filter=${JSON.stringify(filter)}&access_token=${API_TOKEN}`);\n    let response;\n\n    if (bypassCache || !('caches' in window.self)) {\n      response = await fetch(apiUrl);\n    } else {\n      const cache = await ApiHelper._getCache();\n      response = await cache.match(apiUrl);\n      if (typeof response === 'undefined') {\n        await cache.add(apiUrl);\n        response = await cache.match(apiUrl);\n      }\n    }\n\n    return response.json();\n  }\n\n  static async _getCache() {\n    // If there's a cache matching the current year/month, return it\n    const currentYearMonthString = ApiHelper._getCurrentYearMonthString();\n    if (await caches.has(currentYearMonthString)) {\n      return await caches.open(currentYearMonthString);\n    }\n\n    // If the latest year/month in the API is current and the API is finished syncing,\n    // delete all old caches and return a new one for the current year/month\n    const latestYearMonthString = await ApiHelper._getLatestYearMonthStringFromApi();\n    if (latestYearMonthString === currentYearMonthString && ApiHelper._isApiFinishedSyncing(currentYearMonthString)) {\n      await ApiHelper._deleteAllCaches();\n      return await caches.open(currentYearMonthString);\n    }\n\n    // If we end up here, return a cache for the latest year/month in the API\n    return await caches.open(latestYearMonthString);\n  }\n\n  static async _isApiFinishedSyncing(yearMonthString) {\n    return await ApiHelper._getNumberOfLanguagesFromApi(yearMonthString) === await ApiHelper._getTotalNumberOfLanguages();\n  }\n\n  static async _getNumberOfLanguagesFromApi(yearMonthString) {\n    const where = {\n      date: yearMonthString\n    };\n    const apiUrl = encodeURI(`${API_BASE_URL}/api/scores/count?where=${JSON.stringify(where)}&access_token=${API_TOKEN}`);\n    const response = await fetch(apiUrl);\n\n    return (await response.json()).count;\n  }\n\n  static async _getTotalNumberOfLanguages() {\n    const response = await fetch('https://raw.githubusercontent.com/bmaupin/langtrends-api/master/server/boot/classes/languages.json');\n    const languages = await response.json();\n\n    return Object.keys(languages).reduce((numberOfIncludedLanguages, languageName) => {\n      if (languages[languageName].include === true) {\n        numberOfIncludedLanguages += 1;\n      }\n      return numberOfIncludedLanguages;\n    }, 0);\n  }\n\n  static _getCurrentYearMonthString() {\n    return new Date().toISOString().slice(0, 7);\n  }\n\n  static async _getLatestYearMonthStringFromApi() {\n    return (await ApiHelper._getLatestDateFromApi(true)).toISOString().slice(0, 7);\n  }\n\n  static async _deleteAllCaches() {\n    for (let cacheName of await caches.keys()) {\n      await caches.delete(cacheName);\n    }\n  }\n\n  static async getAllScores(dates) {\n    const apiFilter = {\n      where: {\n        or: dates.map(date => ({ date: date }))\n      },\n      // This makes sure the language details get included. In particular we need the language name for labels\n      include: 'language',\n    };\n\n    return await ApiHelper.callApi(apiFilter);\n  }\n}\n\nexport default ApiHelper;\n","import ApiHelper from './ApiHelper';\nimport settings from '../settings.json';\n\nexport default class LanguagesChart {\n  constructor(interval) {\n    this._interval = interval;\n  }\n\n  async getDates() {\n    // We need one extra date internally for calculations, so to avoid extra API calls just drop the extra date\n    return (await this._getDatesForCalculations()).slice(1);\n  }\n\n  async _getDatesForCalculations() {\n    if (typeof this._dates === 'undefined') {\n      let dates = await ApiHelper.buildDates(this._interval, settings.numberOfDates + 1);\n      // From this point on we only need the date as a string\n      this._dates = dates.map(date => date.toISOString());\n    }\n\n    return this._dates;\n  }\n\n  async getSeries() {\n    const datesForCalculations = await this._getDatesForCalculations();\n    const scoresFromApi = await ApiHelper.getAllScores(datesForCalculations);\n    const scoresByDate = LanguagesChart._organizeScoresByDate(scoresFromApi);\n    const customScoresByDate = this._getCustomScoresByDate(scoresByDate, datesForCalculations);\n    const datesForChart = await this.getDates();\n    const topCustomScores = await LanguagesChart._calculateTopScores(customScoresByDate, datesForChart);\n    const formattedSeriesData = await this._formatDataForChart(topCustomScores, datesForChart);\n\n    return formattedSeriesData;\n  }\n\n  // Organize scores by date so we can access each one directly\n  static _organizeScoresByDate(scores) {\n    let scoresByDate = {};\n    for (let i = 0; i < scores.length; i++) {\n      const date = scores[i].date;\n      const languageName = scores[i].language.name;\n      const points = scores[i].points;\n\n      if (!scoresByDate.hasOwnProperty(date)) {\n        scoresByDate[date] = {};\n      }\n      scoresByDate[date][languageName] = points;\n    }\n\n    return scoresByDate;\n  }\n\n  // Convert raw scores into custom scores (percentage change, score difference, etc)\n  _getCustomScoresByDate(scoresByDate, datesForCalculations) {\n    let customScoresByDate = {};\n\n    // Start from 1 because the previous date is just used for calculating the custom score\n    for (let i = 1; i < datesForCalculations.length; i++) {\n      let date = datesForCalculations[i];\n      let previousDate = datesForCalculations[i - 1];\n      customScoresByDate[date] = {};\n\n      for (let languageName in scoresByDate[date]) {\n        // TODO: Filter by scores where the most recent score is above the minimum??\n        // if (scoresByDate[datesForCalculations[datesForCalculations.length - 1]][languageName] > settings.minimumScore) {\n        if (scoresByDate[date][languageName] > settings.minimumScore) {\n          let customScore = this._calculateCustomScore(\n            scoresByDate[previousDate][languageName],\n            scoresByDate[date][languageName]\n          );\n\n          // percentage change could be NaN or Infinity, but react-vis can only handle numbers or null\n          customScore = LanguagesChart._convertNonFiniteToNull(customScore);\n\n          customScoresByDate[date][languageName] = customScore;\n        }\n      }\n    }\n\n    return customScoresByDate;\n  }\n\n  static _convertNonFiniteToNull(number) {\n    if (!Number.isFinite(number)) {\n      number = null;\n    }\n    return number;\n  }\n\n  static async _calculateTopScores(scoresByDate, dates) {\n    let topScores = {};\n\n    for (let i = 0; i < dates.length; i++) {\n      let date = dates[i];\n      // TODO: make this a map to guarantee order\n      topScores[date] = {};\n\n      // Sort scores so we can get the top N and do an ordinal ranking for a bump chart\n      let sortedKeys = Object.keys(scoresByDate[date]).sort(function (a, b) {\n        return (scoresByDate[date][b] - scoresByDate[date][a]);\n      });\n\n      for (let i = 0; i < settings.numberOfLanguages; i++) {\n        let languageName = sortedKeys[i];\n        topScores[date][languageName] = scoresByDate[date][languageName];\n      }\n    }\n\n    return topScores;\n  }\n\n  async _formatDataForChart(topScores, dates) {\n    let formattedScores = [];\n    const allTopLanguages = LanguagesChart._getAllTopLanguages(topScores);\n\n    for (let languageName of allTopLanguages) {\n      formattedScores.push(\n        {\n          title: languageName,\n          data: [],\n        }\n      );\n    }\n\n    for (let i = 0; i < dates.length; i++) {\n      let date = dates[i];\n\n      let formattedScoresIndex = 0;\n      for (let languageName of allTopLanguages) {\n        let score = null;\n        let rank = null;\n        if (topScores[date].hasOwnProperty(languageName)) {\n          score = topScores[date][languageName];\n          // TODO: this should be a map to guarantee order\n          rank = Object.keys(topScores[date]).indexOf(languageName) + 1;\n        }\n\n        formattedScores[formattedScoresIndex].data.push(\n          {\n            x: i,\n            // Use the ordinal number ranking for the chart data in order to create a bump chart\n            y: rank,\n            // TODO: don't add hintTitle and hintValue if score is null\n            hintTitle: languageName,\n            // Add the custom score as a separate property so it can be used for hints on mouseover\n            hintValue: this._formatHintValue(score),\n          }\n        );\n        formattedScoresIndex ++;\n      }\n    }\n\n    return formattedScores;\n  }\n\n  static _getAllTopLanguages(topScores) {\n    let allTopLanguages = [];\n\n    for (let date in topScores) {\n      for (let languageName in topScores[date]) {\n        if (!allTopLanguages.includes(languageName)) {\n          allTopLanguages.push(languageName);\n        }\n      }\n    }\n\n    return allTopLanguages;\n  }\n}\n","import LanguagesChart from './LanguagesChart';\n\nexport default class TopLanguagesChart extends LanguagesChart {\n  _calculateCustomScore(_oldValue, newValue) {\n    return newValue;\n  }\n\n  _formatHintValue(hintValue) {\n    return hintValue;\n  }\n}\n","import LanguagesChart from './LanguagesChart';\n\nexport default class FastestGrowingLanguagesChart extends LanguagesChart {\n  _calculateCustomScore(oldValue, newValue) {\n    return newValue / oldValue * 100;\n  }\n\n  _formatHintValue(hintValue) {\n    return `${Math.round(hintValue)}% growth`;\n  }\n}\n","import LanguagesChart from './LanguagesChart';\n\nexport default class MostGrowthLanguages extends LanguagesChart {\n  _calculateCustomScore(oldValue, newValue) {\n    return newValue - oldValue;\n  }\n\n  _formatHintValue(hintValue) {\n    return `+${hintValue}`;\n  }\n}\n","import TopLanguagesChart from './TopLanguagesChart';\nimport FastestGrowingLanguagesChart from './FastestGrowingLanguagesChart';\nimport MostGrowthLanguages from './MostGrowthLanguages';\n\nclass ChartData {\n  constructor(dates, series) {\n    this._dates = dates;\n    this._series = series;\n  }\n\n  static async fromType(chartType, interval) {\n    let chart;\n    switch(chartType) {\n      case ChartData.CHART_TYPES.FASTEST_GROWTH:\n        chart = new FastestGrowingLanguagesChart(interval);\n        break;\n      case ChartData.CHART_TYPES.MOST_GROWTH:\n        chart = new MostGrowthLanguages(interval);\n        break;\n      case ChartData.CHART_TYPES.TOP_LANGUAGES:\n        chart = new TopLanguagesChart(interval);\n        break;\n      default:\n        throw new Error(`Unknown chart type: ${chartType}`);\n    }\n\n    let dates = await chart.getDates();\n    let series = await chart.getSeries();\n\n    return new ChartData(dates, series);\n  }\n\n  get dates() {\n    return this._dates;\n  }\n\n  get series() {\n    return this._series;\n  }\n}\n\nChartData.CHART_TYPES = {\n  FASTEST_GROWTH: 'fastestgrowth',\n  MOST_GROWTH: 'mostgrowth',\n  TOP_LANGUAGES: 'toplanguages',\n};\n\nexport default ChartData;\n","function point(that, x, y) {\n  that._context.bezierCurveTo(\n    that._prevX + ((x - that._prevX) * that._compression),\n    that._prevY,\n    x - ((x - that._prevX) * that._compression),\n    y,\n    x,\n    y,\n  );\n}\n\n// I'm not sure if \"compression\" is the proper mathematical term...\n// A compression between 0 (straight lines) and 1 will give the best results\n// The closer you approach 1, the cleaner the lines will look but the more difficult it will be to distinguish between\n// multiple lines\nfunction D3SigmoidCurve(context, compression) {\n  this._context = context;\n  this._compression = compression;\n}\n\nD3SigmoidCurve.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x;\n    y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // proceed\n      default: point(this, x, y); break;\n    }\n    this._prevX = x;\n    this._prevY = y;\n  },\n};\n\nexport default (function custom(compression) {\n  function cardinal(context) {\n    return new D3SigmoidCurve(context, compression);\n  }\n\n  cardinal.compression = function(compression) {\n    return custom(compression);\n  };\n\n  return cardinal;\n})(0.75);\n","import GitHubColors from 'github-colors';\nimport React, { Component } from 'react';\nimport {\n  FlexibleWidthXYPlot,\n  Hint,\n  HorizontalGridLines,\n  LineMarkSeries,\n  VerticalGridLines,\n  XAxis,\n  YAxis\n} from 'react-vis';\nimport { Dimmer, Loader, Image } from 'semantic-ui-react';\n\nimport ChartData from '../helpers/ChartData';\nimport D3SigmoidCurve from '../helpers/D3SigmoidCurve';\nimport settings from '../settings.json';\n\nimport './Chart.css';\nimport '../../node_modules/react-vis/dist/style.css';\n\nexport default class Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chartData: null,\n      dates: [],\n      hintValue: null,\n      hoveredSeriesIndex: null,\n    };\n\n    this._onValueMouseOut = this._onValueMouseOut.bind(this);\n    this._onValueMouseOver = this._onValueMouseOver.bind(this);\n    this._xAxisLabelFormatter = this._xAxisLabelFormatter.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.setChartData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (this.props.chartType !== prevProps.chartType ||\n        this.props.intervalInMonths !== prevProps.intervalInMonths) {\n      await this.setChartData();\n    }\n  }\n\n  async setChartData() {\n    const chartData = await ChartData.fromType(this.props.chartType, this.props.intervalInMonths);\n    const leftYAxisLabels = Chart._generateLeftYAxisLabels(chartData.series);\n    const rightYAxisLabels = Chart._generateRightYAxisLabels(chartData.series);\n\n    // TODO: just one object for chart data?\n    this.setState({\n      chartData: chartData.series,\n      dates: chartData.dates,\n      leftYAxisLabels: leftYAxisLabels,\n      rightYAxisLabels: rightYAxisLabels,\n    });\n  }\n\n  static _generateLeftYAxisLabels(series) {\n    return series\n      // Get just the data for the first date\n      .map(languageData => languageData.data[0])\n      // Sort in reverse order because the y values are ordinal ranks (1 should be first, not 10)\n      .sort((a, b) => b.y - a.y)\n      // Drop everything else (x value, y value) and return just a list of hint titles\n      .map(languageData => languageData && languageData.hintTitle);\n  }\n\n  // TODO: remove duplication here?\n  static _generateRightYAxisLabels(series) {\n    return series\n      // Get just the data for the last date\n      .map(languageData => languageData.data[languageData.data.length - 1])\n      // Sort in reverse order because the y values are ordinal ranks (1 should be first, not 10)\n      .sort((a, b) => b.y - a.y)\n      // Drop everything else (x value, y value) and return just a list of hint titles\n      .map(languageData => languageData && languageData.hintTitle);\n  }\n\n  _formatHint(value) {\n    return [\n      {\n        title: value.hintTitle,\n        value: value.hintValue,\n      }\n    ];\n  }\n\n  _onValueMouseOut() {\n    this.setState({\n      hintValue: null,\n      hoveredSeriesIndex: null,\n    });\n  }\n\n  // TODO: This doesn't get called for every point (https://github.com/uber/react-vis/issues/1157)\n  _onValueMouseOver(value, index) {\n    this.setState({\n      hintValue: value,\n      hoveredSeriesIndex: index,\n    });\n  }\n\n  // TODO: could we just format the dates ahead of time and get rid of this method?\n  _xAxisLabelFormatter(_value, index) {\n    return Chart._formatDateForLabel(this.state.dates[index]);\n  }\n\n  static _formatDateForLabel(date) {\n    return date.slice(0, 7);\n  }\n\n  static renderLoadingSpinner() {\n    return (\n      <Dimmer.Dimmable blurring dimmed>\n        <Dimmer active inverted>\n          <Loader size='massive' />\n        </Dimmer>\n\n        <Image src='assets/images/chart-placeholder.png' />\n      </Dimmer.Dimmable>\n    );\n  }\n\n  render() {\n    if (!this.state.chartData) {\n      return Chart.renderLoadingSpinner();\n\n    } else {\n      const d3sigmoidcurve = D3SigmoidCurve.compression(0.5);\n      return (\n        <div className=\"chart-container\">\n          <div className=\"chart-content\">\n            <FlexibleWidthXYPlot\n              height={settings.numberOfLanguages * 49}\n              margin={{\n                left: 80,\n                right: 80\n              }}\n              // Reverse the y scale since we're doing a bump chart\n              yDomain={[settings.numberOfLanguages, 1]}\n            >\n              <VerticalGridLines />\n              <HorizontalGridLines />\n              <XAxis tickFormat={this._xAxisLabelFormatter} tickTotal={this.state.dates.length} />\n              <YAxis orientation=\"left\" tickFormat={(v, i) => this.state.leftYAxisLabels[i]} />\n              <YAxis orientation=\"right\" tickFormat={(v, i) => this.state.rightYAxisLabels[i]} />\n              {this.state.chartData.map((entry, i) =>\n                <LineMarkSeries\n                  curve={d3sigmoidcurve}\n                  getNull={(d) => d.y !== null}\n                  key={entry.title}\n                  color={GitHubColors.get(entry.title, true).color}\n                  data={entry.data}\n                  opacity={this.state.hoveredSeriesIndex === null || this.state.hoveredSeriesIndex === i ? 1 : 0.5}\n                  onValueMouseOut={this._onValueMouseOut}\n                  onValueMouseOver={(datapoint) => this._onValueMouseOver(datapoint, i)}\n                  strokeWidth={this.state.hoveredSeriesIndex !== null && this.state.hoveredSeriesIndex === i ? 4 : null}\n                  lineStyle={{pointerEvents: 'none'}}\n                />\n              )}\n              {this.state.hintValue &&\n                <Hint\n                  format={this._formatHint}\n                  value={this.state.hintValue}\n                />\n              }\n            </FlexibleWidthXYPlot>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n","import React from 'react';\nimport { Menu } from 'semantic-ui-react';\n\nexport default function ChartBottomMenu(props) {\n  const intervalInMonths = props.intervalInMonths;\n\n  return (\n    <Menu secondary>\n      <Menu.Item name='monthly' value='1' active={intervalInMonths === 1} onClick={props.handleItemClick} />\n      <Menu.Item name='quarterly' value='3' active={intervalInMonths === 3} onClick={props.handleItemClick} />\n      <Menu.Item name='yearly' value='12' active={intervalInMonths === 12} onClick={props.handleItemClick} />\n    </Menu>\n  );\n}\n","import React from 'react';\nimport { Menu } from 'semantic-ui-react';\n\nimport ChartData from '../helpers/ChartData';\n\nexport default function ChartTopMenu(props) {\n  const chartType = props.chartType;\n\n  return (\n    <Menu secondary>\n      <Menu.Item\n        name={ChartData.CHART_TYPES.FASTEST_GROWTH}\n        active={chartType === ChartData.CHART_TYPES.FASTEST_GROWTH}\n        onClick={props.handleItemClick}\n      >Fastest growth</Menu.Item>\n      <Menu.Item\n        name={ChartData.CHART_TYPES.MOST_GROWTH}\n        active={chartType === ChartData.CHART_TYPES.MOST_GROWTH}\n        onClick={props.handleItemClick}\n      >Most growth</Menu.Item>\n      <Menu.Item\n        name={ChartData.CHART_TYPES.TOP_LANGUAGES}\n        active={chartType === ChartData.CHART_TYPES.TOP_LANGUAGES}\n        onClick={props.handleItemClick}\n      >Top</Menu.Item>\n    </Menu>\n  );\n}\n","import React, { Component } from 'react';\nimport { Container, Grid, Item } from 'semantic-ui-react';\n\nimport Chart from './Chart';\nimport ChartBottomMenu from './ChartBottomMenu';\nimport ChartData from '../helpers/ChartData';\nimport ChartTopMenu from './ChartTopMenu';\n\nimport './ChartGroup.css';\n\nexport default class ChartGroup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chartType: ChartData.CHART_TYPES.MOST_GROWTH,\n      intervalInMonths: 3,\n    };\n\n    this.handleChartTypeChanged = this.handleChartTypeChanged.bind(this);\n    this.handleIntervalChanged = this.handleIntervalChanged.bind(this);\n  }\n\n  handleChartTypeChanged(_event, { name }) {\n    this.setState({ chartType: name });\n  }\n\n  handleIntervalChanged(_event, { value }) {\n    this.setState({ intervalInMonths: Number(value) });\n  }\n\n  render() {\n    return (\n      <Container>\n        <Grid centered padded>\n          <Item.Group className=\"chart-group\">\n            <Item.Content>\n              <Grid centered padded>\n                <ChartTopMenu\n                  chartType={this.state.chartType}\n                  handleItemClick={this.handleChartTypeChanged}\n                />\n              </Grid>\n              <Chart\n                chartType={this.state.chartType}\n                intervalInMonths={this.state.intervalInMonths}\n              />\n              <Grid centered padded>\n                <ChartBottomMenu\n                  handleItemClick={this.handleIntervalChanged}\n                  intervalInMonths={this.state.intervalInMonths}\n                />\n              </Grid>\n            </Item.Content>\n          </Item.Group>\n        </Grid>\n      </Container>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Container, Icon, Menu } from 'semantic-ui-react';\n\nexport default class TopMenu extends Component {\n  render() {\n    return (\n      <Menu attached borderless inverted>\n        <Container>\n          <Menu.Item fitted='horizontally' header>\n            Programming language trends\n          </Menu.Item>\n\n          <Menu.Menu position='right'>\n            <Menu.Item href='https://github.com/bmaupin/langtrends' icon>\n              <Icon name='github' size='big' />\n            </Menu.Item>\n          </Menu.Menu>\n        </Container>\n      </Menu>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport ChartGroup from './ChartGroup';\nimport TopMenu from './TopMenu';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TopMenu />\n        <ChartGroup />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}