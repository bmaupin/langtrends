{"version":3,"sources":["helpers/ApiHelper.js","helpers/LanguagesChart.js","helpers/TopLanguagesChart.js","helpers/FastestGrowingLanguagesChart.js","helpers/MostGrowthLanguages.js","helpers/ChartFactory.js","helpers/D3SigmoidCurve.js","components/Chart.js","components/ChartBottomMenu.js","components/ChartTopMenu.js","components/ChartGroup.js","components/Header.js","components/App.js","registerServiceWorker.js","index.js"],"names":["settings","require","API_TOKEN","process","ApiHelper","intervalInMonths","numberOfDates","dates","_getLatestDateFromApi","currentDate","_getEarliestDateFromApi","earliestDate","i","push","_subtractMonthsUTC","reverse","apiFilter","order","limit","_callApi","scoresFromApi","Date","date","bypassCache","monthsToSubtract","newDate","setUTCMonth","getUTCMonth","filter","apiUrl","encodeURI","JSON","stringify","window","self","fetch","response","_getCache","cache","match","add","json","currentYearMonthString","_getCurrentYearMonthString","caches","has","open","_getLatestYearMonthStringFromApi","latestYearMonthString","_deleteAllCaches","toISOString","slice","keys","cacheName","delete","_buildApiFilter","where","or","map","include","LanguagesChart","interval","this","_interval","_getDatesForCalculations","_dates","buildDates","datesForCalculations","getAllScores","scoresByDate","_organizeScoresByDate","customScoresByDate","_getCustomScoresByDate","getDates","datesForChart","_calculateTopScores","topCustomScores","_formatDataForChart","formattedSeriesData","length","previousDate","languageName","minimumScore","customScore","_calculateCustomScore","_convertNonFiniteToNull","topScores","formattedScores","allTopLanguages","_getAllTopLanguages","title","data","formattedScoresIndex","score","rank","hasOwnProperty","Object","indexOf","x","y","hintTitle","hintValue","_formatHintValue","areScoresCached","scores","language","name","points","number","Number","isFinite","sortedKeys","sort","a","b","numberOfLanguages","includes","TopLanguagesChart","_oldValue","newValue","FastestGrowingLanguagesChart","oldValue","Math","round","MostGrowthLanguages","ChartFactory","chartType","CHART_TYPES","FASTEST_GROWTH","MOST_GROWTH","TOP_LANGUAGES","chart","Error","D3SigmoidCurve","context","compression","_context","_compression","prototype","areaStart","_line","areaEnd","NaN","lineStart","_point","lineEnd","closePath","point","lineTo","moveTo","that","bezierCurveTo","_prevX","_prevY","custom","cardinal","Chart","props","state","chartData","hoveredSeriesIndex","isLoading","showloadingMessage","loadingMessageTimeout","setTimeout","setState","_onValueMouseOut","bind","_onValueMouseOver","_xAxisLabelFormatter","loadChartData","prevProps","fromType","_chart","isSeriesCached","getSeries","series","leftYAxisLabels","_generateLeftYAxisLabels","rightYAxisLabels","_generateRightYAxisLabels","clearTimeout","value","index","_value","_formatDateForLabel","Dimmer","Dimmable","blurring","dimmed","active","inverted","Loader","size","style","fontSize","marginTop","Image","src","_renderLoadingSpinner","d3sigmoidcurve","className","height","margin","left","right","yDomain","tickFormat","tickTotal","orientation","v","entry","curve","getNull","d","key","color","GitHubColors","get","opacity","onValueMouseOut","onValueMouseOver","datapoint","strokeWidth","lineStyle","pointerEvents","format","_formatHint","languageData","Component","ChartBottomMenu","Menu","secondary","Item","onClick","handleItemClick","ChartTopMenu","ChartGroup","handleChartTypeChanged","handleIntervalChanged","_event","Container","Grid","centered","padded","Group","Content","Header","attached","borderless","fitted","header","position","Popup","on","trigger","icon","Icon","href","App","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","origin","addEventListener","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1db5e7fc.chunk.js","sourcesContent":["const settings = require('../settings.json');\n\nconst API_BASE_URL =\n  process.env.REACT_APP_API_BASE_URL || 'http://localhost:3000';\nconst API_TOKEN = process.env.REACT_APP_API_TOKEN || null;\n\nclass ApiHelper {\n  static async buildDates(\n    intervalInMonths,\n    numberOfDates = settings.numberOfDates\n  ) {\n    let dates = [];\n    let currentDate = await ApiHelper._getLatestDateFromApi();\n    let earliestDate = await ApiHelper._getEarliestDateFromApi();\n\n    for (let i = 0; i < numberOfDates; i++) {\n      if (currentDate <= earliestDate) {\n        break;\n      }\n\n      dates.push(currentDate);\n      currentDate = ApiHelper._subtractMonthsUTC(currentDate, intervalInMonths);\n    }\n\n    return dates.reverse();\n  }\n\n  static async _getEarliestDateFromApi() {\n    const apiFilter = {\n      order: 'date ASC',\n      limit: 1,\n    };\n    let scoresFromApi = await ApiHelper._callApi(apiFilter);\n\n    return new Date(scoresFromApi[0].date);\n  }\n\n  static async _getLatestDateFromApi(bypassCache) {\n    const apiFilter = {\n      order: 'date DESC',\n      limit: 1,\n    };\n    let scoresFromApi = await ApiHelper._callApi(apiFilter, bypassCache);\n\n    return new Date(scoresFromApi[0].date);\n  }\n\n  static _subtractMonthsUTC(date, monthsToSubtract) {\n    let newDate = new Date(date);\n    newDate.setUTCMonth(newDate.getUTCMonth() - monthsToSubtract);\n    return newDate;\n  }\n\n  static async _callApi(filter, bypassCache) {\n    const apiUrl = encodeURI(\n      `${API_BASE_URL}/api/scores?filter=${JSON.stringify(\n        filter\n      )}&access_token=${API_TOKEN}`\n    );\n    let response;\n\n    if (bypassCache || !('caches' in window.self)) {\n      response = await fetch(apiUrl);\n    } else {\n      const cache = await ApiHelper._getCache();\n      response = await cache.match(apiUrl);\n      if (typeof response === 'undefined') {\n        await cache.add(apiUrl);\n        response = await cache.match(apiUrl);\n      }\n    }\n\n    return response.json();\n  }\n\n  static async _getCache() {\n    // If there's a cache matching the current year/month, return it in order to avoid calling the API\n    const currentYearMonthString = ApiHelper._getCurrentYearMonthString();\n    if (await caches.has(currentYearMonthString)) {\n      return await caches.open(currentYearMonthString);\n    }\n\n    // If the latest year/month in the API is current, delete all the old caches before returning the new one\n    const latestYearMonthString = await ApiHelper._getLatestYearMonthStringFromApi();\n    if (latestYearMonthString === currentYearMonthString) {\n      await ApiHelper._deleteAllCaches();\n    }\n\n    // Return a cache for the latest year/month in the API (whether the current month or a previous one)\n    return await caches.open(latestYearMonthString);\n  }\n\n  static _getCurrentYearMonthString() {\n    return new Date().toISOString().slice(0, 7);\n  }\n\n  static async _getLatestYearMonthStringFromApi() {\n    return (await ApiHelper._getLatestDateFromApi(true))\n      .toISOString()\n      .slice(0, 7);\n  }\n\n  static async _deleteAllCaches() {\n    for (let cacheName of await caches.keys()) {\n      await caches.delete(cacheName);\n    }\n  }\n\n  static async getAllScores(dates) {\n    const apiFilter = ApiHelper._buildApiFilter(dates);\n    return await ApiHelper._callApi(apiFilter);\n  }\n\n  static _buildApiFilter(dates) {\n    return {\n      where: {\n        or: dates.map(date => ({ date: date })),\n      },\n      // This makes sure the language details get included. In particular we need the language name for labels\n      include: 'language',\n    };\n  }\n\n  static async areScoresCached(dates) {\n    const apiFilter = ApiHelper._buildApiFilter(dates);\n    const apiUrl = encodeURI(\n      `${API_BASE_URL}/api/scores?filter=${JSON.stringify(\n        apiFilter\n      )}&access_token=${API_TOKEN}`\n    );\n    const currentYearMonthString = ApiHelper._getCurrentYearMonthString();\n\n    if (await caches.has(currentYearMonthString)) {\n      const cache = await caches.open(currentYearMonthString);\n      // cache.match will return undefined if the URL isn't cached\n      return typeof (await cache.match(apiUrl)) !== 'undefined';\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default ApiHelper;\n","import ApiHelper from './ApiHelper';\nimport settings from '../settings.json';\n\nexport default class LanguagesChart {\n  constructor(interval) {\n    this._interval = interval;\n  }\n\n  async getDates() {\n    // We need one extra date internally for calculations, so to avoid extra API calls just drop the extra date\n    return (await this._getDatesForCalculations()).slice(1);\n  }\n\n  async _getDatesForCalculations() {\n    if (typeof this._dates === 'undefined') {\n      let dates = await ApiHelper.buildDates(this._interval, settings.numberOfDates + 1);\n      // From this point on we only need the date as a string\n      this._dates = dates.map(date => date.toISOString());\n    }\n\n    return this._dates;\n  }\n\n  async getSeries() {\n    const datesForCalculations = await this._getDatesForCalculations();\n    const scoresFromApi = await ApiHelper.getAllScores(datesForCalculations);\n    const scoresByDate = LanguagesChart._organizeScoresByDate(scoresFromApi);\n    const customScoresByDate = this._getCustomScoresByDate(scoresByDate, datesForCalculations);\n    const datesForChart = await this.getDates();\n    const topCustomScores = await LanguagesChart._calculateTopScores(customScoresByDate, datesForChart);\n    const formattedSeriesData = await this._formatDataForChart(topCustomScores, datesForChart);\n\n    return formattedSeriesData;\n  }\n\n  // Organize scores by date so we can access each one directly\n  static _organizeScoresByDate(scores) {\n    let scoresByDate = {};\n    for (let i = 0; i < scores.length; i++) {\n      const date = scores[i].date;\n      const languageName = scores[i].language.name;\n      const points = scores[i].points;\n\n      if (!scoresByDate.hasOwnProperty(date)) {\n        scoresByDate[date] = {};\n      }\n      scoresByDate[date][languageName] = points;\n    }\n\n    return scoresByDate;\n  }\n\n  // Convert raw scores into custom scores (percentage change, score difference, etc)\n  _getCustomScoresByDate(scoresByDate, datesForCalculations) {\n    let customScoresByDate = {};\n\n    // Start from 1 because the previous date is just used for calculating the custom score\n    for (let i = 1; i < datesForCalculations.length; i++) {\n      let date = datesForCalculations[i];\n      let previousDate = datesForCalculations[i - 1];\n      customScoresByDate[date] = {};\n\n      for (let languageName in scoresByDate[date]) {\n        // TODO: Filter by scores where the most recent score is above the minimum??\n        // if (scoresByDate[datesForCalculations[datesForCalculations.length - 1]][languageName] > settings.minimumScore) {\n        if (scoresByDate[date][languageName] > settings.minimumScore) {\n          let customScore = this._calculateCustomScore(\n            scoresByDate[previousDate][languageName],\n            scoresByDate[date][languageName]\n          );\n\n          // percentage change could be NaN or Infinity, but react-vis can only handle numbers or null\n          customScore = LanguagesChart._convertNonFiniteToNull(customScore);\n\n          customScoresByDate[date][languageName] = customScore;\n        }\n      }\n    }\n\n    return customScoresByDate;\n  }\n\n  static _convertNonFiniteToNull(number) {\n    if (!Number.isFinite(number)) {\n      number = null;\n    }\n    return number;\n  }\n\n  static async _calculateTopScores(scoresByDate, dates) {\n    let topScores = {};\n\n    for (let i = 0; i < dates.length; i++) {\n      let date = dates[i];\n      // TODO: make this a map to guarantee order\n      topScores[date] = {};\n\n      // Sort scores so we can get the top N and do an ordinal ranking for a bump chart\n      let sortedKeys = Object.keys(scoresByDate[date]).sort(function (a, b) {\n        return (scoresByDate[date][b] - scoresByDate[date][a]);\n      });\n\n      for (let i = 0; i < settings.numberOfLanguages; i++) {\n        let languageName = sortedKeys[i];\n        topScores[date][languageName] = scoresByDate[date][languageName];\n      }\n    }\n\n    return topScores;\n  }\n\n  async _formatDataForChart(topScores, dates) {\n    let formattedScores = [];\n    const allTopLanguages = LanguagesChart._getAllTopLanguages(topScores);\n\n    for (let languageName of allTopLanguages) {\n      formattedScores.push(\n        {\n          title: languageName,\n          data: [],\n        }\n      );\n    }\n\n    for (let i = 0; i < dates.length; i++) {\n      let date = dates[i];\n\n      let formattedScoresIndex = 0;\n      for (let languageName of allTopLanguages) {\n        let score = null;\n        let rank = null;\n        if (topScores[date].hasOwnProperty(languageName)) {\n          score = topScores[date][languageName];\n          // TODO: this should be a map to guarantee order\n          rank = Object.keys(topScores[date]).indexOf(languageName) + 1;\n        }\n\n        formattedScores[formattedScoresIndex].data.push(\n          {\n            x: i,\n            // Use the ordinal number ranking for the chart data in order to create a bump chart\n            y: rank,\n            // TODO: don't add hintTitle and hintValue if score is null\n            hintTitle: languageName,\n            // Add the custom score as a separate property so it can be used for hints on mouseover\n            hintValue: this._formatHintValue(score),\n          }\n        );\n        formattedScoresIndex ++;\n      }\n    }\n\n    return formattedScores;\n  }\n\n  static _getAllTopLanguages(topScores) {\n    let allTopLanguages = [];\n\n    for (let date in topScores) {\n      for (let languageName in topScores[date]) {\n        if (!allTopLanguages.includes(languageName)) {\n          allTopLanguages.push(languageName);\n        }\n      }\n    }\n\n    return allTopLanguages;\n  }\n\n  async isSeriesCached() {\n    const datesForCalculations = await this._getDatesForCalculations();\n    return await ApiHelper.areScoresCached(datesForCalculations);\n  }\n}\n","import LanguagesChart from './LanguagesChart';\n\nexport default class TopLanguagesChart extends LanguagesChart {\n  _calculateCustomScore(_oldValue, newValue) {\n    return newValue;\n  }\n\n  _formatHintValue(hintValue) {\n    return hintValue;\n  }\n}\n","import LanguagesChart from './LanguagesChart';\n\nexport default class FastestGrowingLanguagesChart extends LanguagesChart {\n  _calculateCustomScore(oldValue, newValue) {\n    return newValue / oldValue * 100;\n  }\n\n  _formatHintValue(hintValue) {\n    return `${Math.round(hintValue)}% growth`;\n  }\n}\n","import LanguagesChart from './LanguagesChart';\n\nexport default class MostGrowthLanguages extends LanguagesChart {\n  _calculateCustomScore(oldValue, newValue) {\n    return newValue - oldValue;\n  }\n\n  _formatHintValue(hintValue) {\n    return `+${hintValue}`;\n  }\n}\n","import TopLanguagesChart from './TopLanguagesChart';\nimport FastestGrowingLanguagesChart from './FastestGrowingLanguagesChart';\nimport MostGrowthLanguages from './MostGrowthLanguages';\n\nclass ChartFactory {\n  static async fromType(chartType, interval) {\n    let chart;\n    switch(chartType) {\n      case ChartFactory.CHART_TYPES.FASTEST_GROWTH:\n        chart = new FastestGrowingLanguagesChart(interval);\n        break;\n      case ChartFactory.CHART_TYPES.MOST_GROWTH:\n        chart = new MostGrowthLanguages(interval);\n        break;\n      case ChartFactory.CHART_TYPES.TOP_LANGUAGES:\n        chart = new TopLanguagesChart(interval);\n        break;\n      default:\n        throw new Error(`Unknown chart type: ${chartType}`);\n    }\n\n    return chart;\n  }\n}\n\nChartFactory.CHART_TYPES = {\n  FASTEST_GROWTH: 'fastestgrowth',\n  MOST_GROWTH: 'mostgrowth',\n  TOP_LANGUAGES: 'toplanguages',\n};\n\nexport default ChartFactory;\n","function point(that, x, y) {\n  that._context.bezierCurveTo(\n    that._prevX + ((x - that._prevX) * that._compression),\n    that._prevY,\n    x - ((x - that._prevX) * that._compression),\n    y,\n    x,\n    y,\n  );\n}\n\n// I'm not sure if \"compression\" is the proper mathematical term...\n// A compression between 0 (straight lines) and 1 will give the best results\n// The closer you approach 1, the cleaner the lines will look but the more difficult it will be to distinguish between\n// multiple lines\nfunction D3SigmoidCurve(context, compression) {\n  this._context = context;\n  this._compression = compression;\n}\n\nD3SigmoidCurve.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x;\n    y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // proceed\n      default: point(this, x, y); break;\n    }\n    this._prevX = x;\n    this._prevY = y;\n  },\n};\n\nexport default (function custom(compression) {\n  function cardinal(context) {\n    return new D3SigmoidCurve(context, compression);\n  }\n\n  cardinal.compression = function(compression) {\n    return custom(compression);\n  };\n\n  return cardinal;\n})(0.75);\n","import GitHubColors from 'github-colors';\nimport React, { Component } from 'react';\nimport {\n  FlexibleWidthXYPlot,\n  Hint,\n  HorizontalGridLines,\n  LineMarkSeries,\n  VerticalGridLines,\n  XAxis,\n  YAxis,\n} from 'react-vis';\nimport { Dimmer, Loader, Image } from 'semantic-ui-react';\n\nimport ChartFactory from '../helpers/ChartFactory';\nimport D3SigmoidCurve from '../helpers/D3SigmoidCurve';\nimport settings from '../settings.json';\n\nimport './Chart.css';\nimport '../../node_modules/react-vis/dist/style.css';\n\nexport default class Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chartData: null,\n      dates: [],\n      hintValue: null,\n      hoveredSeriesIndex: null,\n      isLoading: true,\n      showloadingMessage: false,\n    };\n\n    // Don't show the loading message right away because it can create a lot of visual noise if the loading spinner\n    // only briefly flashes\n    this.loadingMessageTimeout = setTimeout(\n      () => {\n        this.setState({ showloadingMessage: true });\n      },\n      // This should be just long enough so it only shows when the API isn't ready but doesn't show in any other\n      // situations, such as when changing chart types when the data isn't cached yet\n      4000\n    );\n\n    this._onValueMouseOut = this._onValueMouseOut.bind(this);\n    this._onValueMouseOver = this._onValueMouseOver.bind(this);\n    this._xAxisLabelFormatter = this._xAxisLabelFormatter.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    // These conditionals prevent some extra flashing and wonkiness caused by reloading the chart data too aggressively\n    if (\n      this.props.chartType !== prevProps.chartType ||\n      this.props.intervalInMonths !== prevProps.intervalInMonths\n    ) {\n      await this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n    this._chart = await ChartFactory.fromType(\n      this.props.chartType,\n      this.props.intervalInMonths\n    );\n\n    const isSeriesCached = await this._chart.isSeriesCached();\n    // Use to show the loading spinner if the data isn't cached so the user has some feedback that it's being loaded,\n    // but if the data is cached we don't want to show the loading spinner because it causes an annoying flash\n    this.setState({\n      isLoading: !isSeriesCached,\n    });\n\n    const dates = await this._chart.getDates();\n    const series = await this._chart.getSeries();\n\n    const leftYAxisLabels = Chart._generateLeftYAxisLabels(series);\n    const rightYAxisLabels = Chart._generateRightYAxisLabels(series);\n\n    // Prevent the loading message from showing after the data is loaded\n    clearTimeout(this.loadingMessageTimeout);\n\n    // TODO: just one object for chart data?\n    this.setState({\n      chartData: series,\n      dates: dates,\n      isLoading: false,\n      leftYAxisLabels: leftYAxisLabels,\n      rightYAxisLabels: rightYAxisLabels,\n      showloadingMessage: false,\n    });\n  }\n\n  static _generateLeftYAxisLabels(series) {\n    return (\n      series\n        // Get just the data for the first date\n        .map(languageData => languageData.data[0])\n        // Sort in reverse order because the y values are ordinal ranks (1 should be first, not 10)\n        .sort((a, b) => b.y - a.y)\n        // Drop everything else (x value, y value) and return just a list of hint titles\n        .map(languageData => languageData && languageData.hintTitle)\n    );\n  }\n\n  // TODO: remove duplication here?\n  static _generateRightYAxisLabels(series) {\n    return (\n      series\n        // Get just the data for the last date\n        .map(languageData => languageData.data[languageData.data.length - 1])\n        // Sort in reverse order because the y values are ordinal ranks (1 should be first, not 10)\n        .sort((a, b) => b.y - a.y)\n        // Drop everything else (x value, y value) and return just a list of hint titles\n        .map(languageData => languageData && languageData.hintTitle)\n    );\n  }\n\n  _formatHint(value) {\n    return [\n      {\n        title: value.hintTitle,\n        value: value.hintValue,\n      },\n    ];\n  }\n\n  _onValueMouseOut() {\n    this.setState({\n      hintValue: null,\n      hoveredSeriesIndex: null,\n    });\n  }\n\n  _onValueMouseOver(value, index) {\n    this.setState({\n      hintValue: value,\n      hoveredSeriesIndex: index,\n    });\n  }\n\n  // TODO: could we just format the dates ahead of time and get rid of this method?\n  _xAxisLabelFormatter(_value, index) {\n    return Chart._formatDateForLabel(this.state.dates[index]);\n  }\n\n  static _formatDateForLabel(date) {\n    return date.slice(0, 7);\n  }\n\n  _renderLoadingSpinner() {\n    return (\n      <Dimmer.Dimmable blurring dimmed>\n        <Dimmer active inverted>\n          <Loader size=\"massive\">\n            {this.state.showloadingMessage && (\n              <span>\n                Please wait\n                <div style={{ fontSize: '0.6em', marginTop: '0.5em' }}>\n                  (The backend may take up to 30 seconds to start)\n                </div>\n              </span>\n            )}\n          </Loader>\n        </Dimmer>\n\n        <Image src=\"assets/images/chart-placeholder.png\" />\n      </Dimmer.Dimmable>\n    );\n  }\n\n  render() {\n    if (this.state.isLoading || !this.state.chartData) {\n      return this._renderLoadingSpinner();\n    } else {\n      const d3sigmoidcurve = D3SigmoidCurve.compression(0.5);\n      return (\n        <div className=\"chart-container\">\n          <div className=\"chart-content\">\n            <FlexibleWidthXYPlot\n              height={settings.numberOfLanguages * 49}\n              margin={{\n                left: 80,\n                right: 80,\n              }}\n              // Reverse the y scale since we're doing a bump chart\n              yDomain={[settings.numberOfLanguages, 1]}\n            >\n              <VerticalGridLines />\n              <HorizontalGridLines />\n              <XAxis\n                tickFormat={this._xAxisLabelFormatter}\n                tickTotal={this.state.dates.length}\n              />\n              <YAxis\n                orientation=\"left\"\n                tickFormat={(v, i) => this.state.leftYAxisLabels[i]}\n              />\n              <YAxis\n                orientation=\"right\"\n                tickFormat={(v, i) => this.state.rightYAxisLabels[i]}\n              />\n              {this.state.chartData.map((entry, i) => (\n                <LineMarkSeries\n                  curve={d3sigmoidcurve}\n                  getNull={d => d.y !== null}\n                  key={entry.title}\n                  color={GitHubColors.get(entry.title, true).color}\n                  data={entry.data}\n                  opacity={\n                    this.state.hoveredSeriesIndex === null ||\n                    this.state.hoveredSeriesIndex === i\n                      ? 1\n                      : 0.5\n                  }\n                  onValueMouseOut={this._onValueMouseOut}\n                  onValueMouseOver={datapoint =>\n                    this._onValueMouseOver(datapoint, i)\n                  }\n                  strokeWidth={\n                    this.state.hoveredSeriesIndex !== null &&\n                    this.state.hoveredSeriesIndex === i\n                      ? 4\n                      : null\n                  }\n                  lineStyle={{ pointerEvents: 'none' }}\n                />\n              ))}\n              {this.state.hintValue && (\n                <Hint format={this._formatHint} value={this.state.hintValue} />\n              )}\n            </FlexibleWidthXYPlot>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n","import React from 'react';\nimport { Menu } from 'semantic-ui-react';\n\nexport default function ChartBottomMenu(props) {\n  const intervalInMonths = props.intervalInMonths;\n\n  return (\n    <Menu secondary>\n      <Menu.Item name='monthly' value='1' active={intervalInMonths === 1} onClick={props.handleItemClick} />\n      <Menu.Item name='quarterly' value='3' active={intervalInMonths === 3} onClick={props.handleItemClick} />\n      <Menu.Item name='yearly' value='12' active={intervalInMonths === 12} onClick={props.handleItemClick} />\n    </Menu>\n  );\n}\n","import React from 'react';\nimport { Menu } from 'semantic-ui-react';\n\nimport ChartFactory from '../helpers/ChartFactory';\n\nexport default function ChartTopMenu(props) {\n  const chartType = props.chartType;\n\n  return (\n    <Menu secondary>\n      <Menu.Item\n        name={ChartFactory.CHART_TYPES.FASTEST_GROWTH}\n        active={chartType === ChartFactory.CHART_TYPES.FASTEST_GROWTH}\n        onClick={props.handleItemClick}\n      >Fastest growth</Menu.Item>\n      <Menu.Item\n        name={ChartFactory.CHART_TYPES.MOST_GROWTH}\n        active={chartType === ChartFactory.CHART_TYPES.MOST_GROWTH}\n        onClick={props.handleItemClick}\n      >Most growth</Menu.Item>\n      <Menu.Item\n        name={ChartFactory.CHART_TYPES.TOP_LANGUAGES}\n        active={chartType === ChartFactory.CHART_TYPES.TOP_LANGUAGES}\n        onClick={props.handleItemClick}\n      >Top</Menu.Item>\n    </Menu>\n  );\n}\n","import React, { Component } from 'react';\nimport { Container, Grid, Item } from 'semantic-ui-react';\n\nimport Chart from './Chart';\nimport ChartBottomMenu from './ChartBottomMenu';\nimport ChartFactory from '../helpers/ChartFactory';\nimport ChartTopMenu from './ChartTopMenu';\n\nimport './ChartGroup.css';\n\nexport default class ChartGroup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chartType: ChartFactory.CHART_TYPES.MOST_GROWTH,\n      intervalInMonths: 3,\n    };\n\n    this.handleChartTypeChanged = this.handleChartTypeChanged.bind(this);\n    this.handleIntervalChanged = this.handleIntervalChanged.bind(this);\n  }\n\n  handleChartTypeChanged(_event, { name }) {\n    this.setState({ chartType: name });\n  }\n\n  handleIntervalChanged(_event, { value }) {\n    this.setState({ intervalInMonths: Number(value) });\n  }\n\n  render() {\n    return (\n      <Container>\n        <Grid centered padded>\n          <Item.Group className=\"chart-group\">\n            <Item.Content>\n              <Grid centered padded>\n                <ChartTopMenu\n                  chartType={this.state.chartType}\n                  handleItemClick={this.handleChartTypeChanged}\n                />\n              </Grid>\n              <Chart\n                chartType={this.state.chartType}\n                intervalInMonths={this.state.intervalInMonths}\n              />\n              <Grid centered padded>\n                <ChartBottomMenu\n                  handleItemClick={this.handleIntervalChanged}\n                  intervalInMonths={this.state.intervalInMonths}\n                />\n              </Grid>\n            </Item.Content>\n          </Item.Group>\n        </Grid>\n      </Container>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Container, Icon, Menu, Popup } from 'semantic-ui-react';\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <Menu attached borderless inverted>\n        <Container>\n          <Menu.Item fitted=\"horizontally\" header>\n            Programming language trends\n          </Menu.Item>\n\n          <Menu.Menu position=\"right\">\n            <Popup\n              on=\"click\"\n              trigger={\n                <Menu.Item icon>\n                  <Icon name=\"help circle\" size=\"big\" />\n                </Menu.Item>\n              }\n            >\n              <Popup.Content>\n                <h3>How the data is calculated</h3>\n                <p>\n                  First, a base numerical value for a given language and date is\n                  calculated by adding the total number of GitHub repositories\n                  to the total number of Stack Overflow tags for that language\n                  up to that day.\n                </p>\n                <h4>Fastest growth</h4>\n                <p>\n                  Languages with the highest percentage change compared to the\n                  previous date. Note that scores under a certain threshold (\n                  <a href=\"https://github.com/bmaupin/langtrends/blob/master/src/settings.json#L2\">\n                    currently 1000\n                  </a>\n                  ) are filtered out to reduce{' '}\n                  <a href=\"https://xkcd.com/1102/\">dubiousness</a>.\n                </p>\n                <h4>Most growh</h4>\n                <p>\n                  Languages with the highest numerical change compared to the\n                  previous date.\n                </p>\n                <h4>Top</h4>\n                <p>\n                  Languages with the total highest value for a particular given\n                  date.\n                </p>\n              </Popup.Content>\n            </Popup>\n            <Menu.Item href=\"https://github.com/bmaupin/langtrends\" icon>\n              <Icon name=\"github\" size=\"big\" />\n            </Menu.Item>\n          </Menu.Menu>\n        </Container>\n      </Menu>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport ChartGroup from './ChartGroup';\nimport Header from './Header';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <ChartGroup />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}