{"version":3,"sources":["components/BottomButtonGroup.tsx","helpers/ChartFactory.ts","helpers/ApiHelper.ts","helpers/LanguagesChart.ts","helpers/TopLanguagesChart.ts","helpers/FastestGrowingLanguagesChart.ts","helpers/MostGrowthLanguages.ts","helpers/D3SigmoidCurve.js","components/Chart.tsx","components/TopButtonGroup.tsx","components/Main.tsx","components/Header.tsx","components/App.tsx","index.tsx"],"names":["BottomButtonGroup","props","intervalInMonths","Button","Group","basic","className","value","active","onClick","handleItemClick","ChartType","settings","require","API_BASE_URL","process","ApiHelper","numberOfDates","dates","getLatestDateFromApi","currentDate","getEarliestDateFromApi","earliestDate","i","push","subtractMonthsUTC","reverse","map","date","toISOString","slice","getScoresFromApi","scores","latestDate","score","Date","apiUrl","encodeURI","fetch","response","json","allScores","filter","includes","monthsToSubtract","newDate","setUTCMonth","getUTCMonth","this","getScoresWithLanguages","getLanguagesFromApi","languages","language","find","id","languageId","LanguagesChart","interval","getDatesForCalculations","buildDates","datesForCalculations","getScores","scoresFromApi","scoresByDate","organizeScoresByDate","customScoresByDate","getCustomScoresByDate","getDates","datesForChart","calculateTopScores","topCustomScores","formatDataForChart","formattedSeriesData","length","previousDate","languageName","customScore","calculateCustomScore","convertNonFiniteNumber","topScores","formattedScores","allTopLanguages","getAllTopLanguages","label","data","formattedScoresIndex","rank","hasOwnProperty","Object","keys","indexOf","x","y","seriesLabel","tooltipValue","formatTooltipValue","name","points","number","Number","isFinite","sortedKeys","sort","a","b","numberOfLanguages","TopLanguagesChart","_oldValue","newValue","String","FastestGrowingLanguagesChart","oldValue","Math","round","MostGrowthLanguages","ChartFactory","chartType","FastestGrowth","MostGrowth","TopLanguages","chart","Error","D3SigmoidCurve","context","compression","_context","_compression","prototype","areaStart","_line","areaEnd","NaN","lineStart","_point","lineEnd","closePath","point","lineTo","moveTo","that","bezierCurveTo","_prevX","_prevY","custom","cardinal","Chart","useState","activeSeriesIndex","setActiveSeriesIndex","chartData","setChartData","setDates","focusedDatumTooltip","setFocusedDatumTooltip","leftYAxisLabels","setLeftYAxisLabels","rightYAxisLabels","setRightYAxisLabels","useEffect","generateLeftYAxisLabels","series","generateYAxisLabels","languageData","generateRightYAxisLabels","loadChartData","fromType","getSeries","seriesPoints","seriesPoint","primaryAxis","useMemo","formatters","scale","xValue","getValue","datum","scaleType","secondaryAxes","yAxisProperties","invert","tickCount","curve","tooltip","showDatumElements","position","style","height","maxWidth","options","getDatumStyle","status","secondaryValue","circle","r","getSeriesStyle","defaultSeriesStyle","color","GitHubColors","get","transition","strokeWidth","line","opacity","interactionMode","onFocusDatum","seriesIndex","originalDatum","primaryCursor","showLabel","showLine","secondaryCursor","groupingMode","TopButtonGroup","Main","useSearchParams","searchParams","setSearchParams","defaultChartType","Container","Grid","centered","padded","Item","Content","_event","set","Header","Menu","attached","borderless","inverted","fitted","header","to","search","Popup","on","trigger","icon","Icon","size","href","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.74ad7e6a.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, ButtonProps } from 'semantic-ui-react';\n\nimport './ButtonGroup.css';\n\nexport default function BottomButtonGroup(props: {\n  intervalInMonths: number;\n  handleItemClick: (\n    event: React.MouseEvent<HTMLElement>,\n    data: ButtonProps\n  ) => void;\n}) {\n  const intervalInMonths = props.intervalInMonths;\n\n  return (\n    <Button.Group basic className=\"button-group\">\n      <Button\n        value=\"1\"\n        active={intervalInMonths === 1}\n        onClick={props.handleItemClick}\n      >\n        Monthly\n      </Button>\n      <Button\n        value=\"3\"\n        active={intervalInMonths === 3}\n        onClick={props.handleItemClick}\n      >\n        Quarterly\n      </Button>\n      <Button\n        value=\"12\"\n        active={intervalInMonths === 12}\n        onClick={props.handleItemClick}\n      >\n        Yearly\n      </Button>\n    </Button.Group>\n  );\n}\n","import TopLanguagesChart from './TopLanguagesChart';\nimport FastestGrowingLanguagesChart from './FastestGrowingLanguagesChart';\nimport MostGrowthLanguages from './MostGrowthLanguages';\n\nexport enum ChartType {\n  FastestGrowth = 'fastest_growth',\n  MostGrowth = 'most_growth',\n  TopLanguages = 'top_languages',\n}\n\nexport default class ChartFactory {\n  static async fromType(chartType: string, interval: number) {\n    let chart;\n    switch (chartType) {\n      case ChartType.FastestGrowth:\n        chart = new FastestGrowingLanguagesChart(interval);\n        break;\n      case ChartType.MostGrowth:\n        chart = new MostGrowthLanguages(interval);\n        break;\n      case ChartType.TopLanguages:\n        chart = new TopLanguagesChart(interval);\n        break;\n      default:\n        throw new Error(`Unknown chart type: ${chartType}`);\n    }\n\n    return chart;\n  }\n}\n","const settings = require('../settings.json');\n\nconst API_BASE_URL =\n  process.env.REACT_APP_API_BASE_URL || 'http://localhost:3000';\n\nexport interface Language {\n  id: number;\n  name: string;\n  stackoverflowTag?: string;\n}\n\nexport interface Score {\n  date: string;\n  language?: Language;\n  languageId: number;\n  points: number;\n}\n\nexport default class ApiHelper {\n  public static async buildDates(\n    intervalInMonths: number,\n    numberOfDates = settings.numberOfDates\n  ): Promise<string[]> {\n    const dates = [];\n    let currentDate = await ApiHelper.getLatestDateFromApi();\n    const earliestDate = await ApiHelper.getEarliestDateFromApi();\n\n    for (let i = 0; i < numberOfDates; i++) {\n      if (currentDate < earliestDate) {\n        break;\n      }\n\n      dates.push(currentDate);\n      currentDate = ApiHelper.subtractMonthsUTC(currentDate, intervalInMonths);\n    }\n\n    dates.reverse();\n\n    // We only need the date as a string; use the same format as the JSON data\n    return dates.map((date) => date.toISOString().slice(0, 10));\n  }\n\n  private static async getLatestDateFromApi(): Promise<Date> {\n    const scores = await ApiHelper.getScoresFromApi();\n    let latestDate = '';\n\n    // Scores are not guaranteed to be in order by date\n    for (const score of scores) {\n      // Comparing date strings like this actually works 😁\n      if (score.date > latestDate) {\n        latestDate = score.date;\n      }\n    }\n\n    return new Date(latestDate);\n  }\n\n  // It might seem ineffecient to call the API every time we need to get the scores,\n  // but so far the browser caching seems to handle it just fine. We can always add\n  // some kind of caching (e.g. react-query) later if needed.\n  private static async getScoresFromApi(dates?: string[]): Promise<Score[]> {\n    const apiUrl = encodeURI(`${API_BASE_URL}/scores.json`);\n\n    const response = await fetch(apiUrl);\n    const allScores = (await response.json()) as Score[];\n\n    if (dates) {\n      return allScores.filter((score) => dates.includes(score.date));\n    }\n\n    return allScores;\n  }\n\n  private static async getEarliestDateFromApi(): Promise<Date> {\n    const scores = await ApiHelper.getScoresFromApi();\n    let earliestDate = '';\n\n    for (const score of scores) {\n      if (score.date < earliestDate) {\n        earliestDate = score.date;\n      }\n    }\n\n    return new Date(earliestDate);\n  }\n\n  private static subtractMonthsUTC(date: Date, monthsToSubtract: number): Date {\n    // Make a copy of the date object so we don't overwrite it\n    const newDate = new Date(date);\n    newDate.setUTCMonth(newDate.getUTCMonth() - monthsToSubtract);\n    return newDate;\n  }\n\n  public static async getScores(dates: string[]): Promise<Score[]> {\n    return await this.getScoresWithLanguages(dates);\n  }\n\n  private static async getScoresWithLanguages(\n    dates: string[]\n  ): Promise<Score[]> {\n    const languages = await this.getLanguagesFromApi();\n    const scores = await this.getScoresFromApi(dates);\n    for (const score of scores) {\n      score.language = languages.find(\n        (language) => language.id === score.languageId\n      );\n    }\n\n    return scores;\n  }\n\n  private static async getLanguagesFromApi(): Promise<Language[]> {\n    const apiUrl = encodeURI(`${API_BASE_URL}/languages.json`);\n\n    const response = await fetch(apiUrl);\n    return response.json();\n  }\n}\n","import ApiHelper, { Score } from './ApiHelper';\nimport settings from '../settings.json';\n\nexport interface SeriesPoint {\n  seriesLabel: string;\n  tooltipValue: string;\n  x: number;\n  y: number;\n}\n\nexport interface SeriesData {\n  data: SeriesPoint[];\n  label: string;\n}\n\ninterface ScoresByDate {\n  [key: string]: {\n    [key: string]: number;\n  };\n}\n\nexport default abstract class LanguagesChart {\n  private dates: string[] | undefined;\n  private interval: number;\n\n  constructor(interval: number) {\n    this.interval = interval;\n  }\n\n  protected abstract calculateCustomScore(\n    oldValue: number,\n    newValue: number\n  ): number;\n\n  protected abstract formatTooltipValue(tooltipValue: number): string;\n\n  public async getDates() {\n    // We need one extra date internally for calculations, so to avoid extra API calls just drop the extra date\n    return (await this.getDatesForCalculations()).slice(1);\n  }\n\n  private async getDatesForCalculations() {\n    if (!this.dates) {\n      this.dates = await ApiHelper.buildDates(\n        this.interval,\n        settings.numberOfDates + 1\n      );\n    }\n\n    return this.dates;\n  }\n\n  public async getSeries(): Promise<SeriesData[]> {\n    const datesForCalculations = await this.getDatesForCalculations();\n    const scoresFromApi = await ApiHelper.getScores(datesForCalculations);\n    const scoresByDate = LanguagesChart.organizeScoresByDate(scoresFromApi);\n    const customScoresByDate = this.getCustomScoresByDate(\n      scoresByDate,\n      datesForCalculations\n    );\n    const datesForChart = await this.getDates();\n    const topCustomScores = await LanguagesChart.calculateTopScores(\n      customScoresByDate,\n      datesForChart\n    );\n    const formattedSeriesData = await this.formatDataForChart(\n      topCustomScores,\n      datesForChart\n    );\n\n    return formattedSeriesData;\n  }\n\n  // Organize scores by date so we can access each one directly\n  private static organizeScoresByDate(scores: Score[]): ScoresByDate {\n    const scoresByDate = {} as ScoresByDate;\n    for (let i = 0; i < scores.length; i++) {\n      const date = scores[i].date;\n      const languageName = scores[i].language!.name;\n      const points = scores[i].points;\n\n      if (!scoresByDate.hasOwnProperty(date)) {\n        scoresByDate[date] = {};\n      }\n      scoresByDate[date][languageName] = points;\n    }\n\n    return scoresByDate;\n  }\n\n  // Convert raw scores into custom scores (percentage change, score difference, etc)\n  private getCustomScoresByDate(\n    scoresByDate: ScoresByDate,\n    datesForCalculations: string[]\n  ): ScoresByDate {\n    const customScoresByDate = {} as ScoresByDate;\n\n    // Start from 1 because the previous date is just used for calculating the custom score\n    for (let i = 1; i < datesForCalculations.length; i++) {\n      const date = datesForCalculations[i];\n      const previousDate = datesForCalculations[i - 1];\n      customScoresByDate[date] = {};\n\n      for (const languageName in scoresByDate[date]) {\n        let customScore = this.calculateCustomScore(\n          scoresByDate[previousDate][languageName]!,\n          scoresByDate[date][languageName]!\n        );\n\n        customScore = LanguagesChart.convertNonFiniteNumber(customScore);\n\n        customScoresByDate[date][languageName] = customScore;\n      }\n    }\n\n    return customScoresByDate;\n  }\n\n  // I think this is a rare occurrence, but percentage change (for FastestGrowingLanguagesChart)\n  // could be NaN or Infinity (e.g. if a previous month's value was 0). react-vis can only handle\n  // numbers or null\n  private static convertNonFiniteNumber(number: number): number {\n    if (!Number.isFinite(number)) {\n      return 0;\n    }\n    return number;\n  }\n\n  private static async calculateTopScores(\n    scoresByDate: ScoresByDate,\n    dates: string[]\n  ): Promise<ScoresByDate> {\n    const topScores = {} as ScoresByDate;\n\n    for (let i = 0; i < dates.length; i++) {\n      const date = dates[i];\n      // TODO: make this a map to guarantee order\n      topScores[date] = {};\n\n      // Sort scores so we can get the top N and do an ordinal ranking for a bump chart\n      const sortedKeys = Object.keys(scoresByDate[date]).sort(function (a, b) {\n        return scoresByDate[date][b]! - scoresByDate[date][a]!;\n      });\n\n      for (let i = 0; i < settings.numberOfLanguages; i++) {\n        const languageName = sortedKeys[i];\n        topScores[date][languageName] = scoresByDate[date][languageName];\n      }\n    }\n\n    return topScores;\n  }\n\n  private async formatDataForChart(\n    topScores: ScoresByDate,\n    dates: string[]\n  ): Promise<SeriesData[]> {\n    const formattedScores = [] as SeriesData[];\n    const allTopLanguages = LanguagesChart.getAllTopLanguages(topScores);\n\n    for (const languageName of allTopLanguages) {\n      formattedScores.push({\n        label: languageName,\n        data: [],\n      });\n    }\n\n    for (let i = 0; i < dates.length; i++) {\n      const date = dates[i];\n\n      let formattedScoresIndex = 0;\n      for (let languageName of allTopLanguages) {\n        let score = 0;\n        let rank = 0;\n        if (topScores[date].hasOwnProperty(languageName)) {\n          score = topScores[date][languageName];\n          // TODO: this should be a map to guarantee order\n          rank = Object.keys(topScores[date]).indexOf(languageName) + 1;\n        }\n\n        formattedScores[formattedScoresIndex].data.push({\n          x: i,\n          // Use the ordinal number ranking for the chart data in order to create a bump chart\n          y: rank,\n          // TODO: don't add seriesLabel and tooltipValue if score is 0\n          seriesLabel: languageName,\n          // Add the custom score as a separate property so it can be used for hints on mouseover\n          tooltipValue: this.formatTooltipValue(score),\n        });\n        formattedScoresIndex++;\n      }\n    }\n\n    return formattedScores;\n  }\n\n  private static getAllTopLanguages(topScores: ScoresByDate): string[] {\n    const allTopLanguages = [] as string[];\n\n    for (const date in topScores) {\n      for (const languageName in topScores[date]) {\n        if (!allTopLanguages.includes(languageName)) {\n          allTopLanguages.push(languageName);\n        }\n      }\n    }\n\n    return allTopLanguages;\n  }\n}\n","import LanguagesChart from './LanguagesChart';\n\nexport default class TopLanguagesChart extends LanguagesChart {\n  protected calculateCustomScore(_oldValue: number, newValue: number) {\n    return newValue;\n  }\n\n  protected formatTooltipValue(tooltipValue: number): string {\n    return String(tooltipValue);\n  }\n}\n","import LanguagesChart from './LanguagesChart';\n\nexport default class FastestGrowingLanguagesChart extends LanguagesChart {\n  protected calculateCustomScore(oldValue: number, newValue: number) {\n    return (newValue / oldValue) * 100;\n  }\n\n  protected formatTooltipValue(tooltipValue: number): string {\n    return `${Math.round(tooltipValue)}% growth`;\n  }\n}\n","import LanguagesChart from './LanguagesChart';\n\nexport default class MostGrowthLanguages extends LanguagesChart {\n  protected calculateCustomScore(oldValue: number, newValue: number) {\n    return newValue - oldValue;\n  }\n\n  protected formatTooltipValue(tooltipValue: number): string {\n    return `+${tooltipValue}`;\n  }\n}\n","// Derived from https://github.com/d3/d3-shape/blob/master/src/curve/linear.js\n\nfunction point(that, x, y) {\n  that._context.bezierCurveTo(\n    that._prevX + (x - that._prevX) * that._compression,\n    that._prevY,\n    x - (x - that._prevX) * that._compression,\n    y,\n    x,\n    y\n  );\n}\n\n// I'm not sure if \"compression\" is the proper mathematical term...\n// A compression between 0 (straight lines) and 1 will give the best results\n// The closer you approach 1, the cleaner the lines will look but the more difficult it will be to distinguish between\n// multiple lines\nfunction D3SigmoidCurve(context, compression) {\n  this._context = context;\n  this._compression = compression;\n}\n\nD3SigmoidCurve.prototype = {\n  areaStart: function () {\n    this._line = 0;\n  },\n  areaEnd: function () {\n    this._line = NaN;\n  },\n  lineStart: function () {\n    this._point = 0;\n  },\n  lineEnd: function () {\n    if (this._line || (this._line !== 0 && this._point === 1))\n      this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function (x, y) {\n    x = +x;\n    y = +y;\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\n        break;\n      case 1:\n        this._point = 2; // proceed\n      // eslint-disable-next-line no-fallthrough\n      default:\n        point(this, x, y);\n        break;\n    }\n    this._prevX = x;\n    this._prevY = y;\n  },\n};\n\nexport default (function custom(compression) {\n  function cardinal(context) {\n    return new D3SigmoidCurve(context, compression);\n  }\n\n  cardinal.compression = function (compression) {\n    return custom(compression);\n  };\n\n  return cardinal;\n})(0.75);\n","import GitHubColors from 'github-colors';\nimport React, { CSSProperties, useEffect, useMemo, useState } from 'react';\nimport { AxisOptions, Chart as ReactChart } from 'react-charts';\n\nimport ChartFactory from '../helpers/ChartFactory';\nimport D3SigmoidCurve from '../helpers/D3SigmoidCurve';\nimport settings from '../settings.json';\n\nimport './Chart.css';\nimport { SeriesData, SeriesPoint } from '../helpers/LanguagesChart';\n\nexport default function Chart(props: {\n  chartType: string;\n  intervalInMonths: number;\n}) {\n  const [activeSeriesIndex, setActiveSeriesIndex] = useState(-1);\n  const [chartData, setChartData] = useState([] as SeriesData[]);\n  const [dates, setDates] = useState([] as string[]);\n  const [focusedDatumTooltip, setFocusedDatumTooltip] = useState('');\n  const [leftYAxisLabels, setLeftYAxisLabels] = useState([] as string[]);\n  const [rightYAxisLabels, setRightYAxisLabels] = useState([] as string[]);\n\n  useEffect(() => {\n    const generateLeftYAxisLabels = (series: SeriesData[]): string[] => {\n      return generateYAxisLabels(\n        // Get just the data for the first date\n        series.map((languageData) => languageData.data[0])\n      );\n    };\n\n    const generateRightYAxisLabels = (series: SeriesData[]): string[] => {\n      return generateYAxisLabels(\n        // Get just the data for the last date\n        series.map(\n          (languageData) => languageData.data[languageData.data.length - 1]\n        )\n      );\n    };\n\n    const loadChartData = async () => {\n      const chart = await ChartFactory.fromType(\n        props.chartType,\n        props.intervalInMonths\n      );\n\n      // TODO: just one object for chart data?\n      const dates = await chart.getDates();\n      const series = await chart.getSeries();\n\n      const leftYAxisLabels = generateLeftYAxisLabels(series);\n      const rightYAxisLabels = generateRightYAxisLabels(series);\n\n      setChartData(series);\n      setDates(dates);\n      setLeftYAxisLabels(leftYAxisLabels);\n      setRightYAxisLabels(rightYAxisLabels);\n    };\n\n    loadChartData();\n  }, [props.chartType, props.intervalInMonths]);\n\n  const generateYAxisLabels = (seriesPoints: SeriesPoint[]): string[] => {\n    return (\n      seriesPoints\n        // Filter out 0 y values\n        .filter((seriesPoint) => seriesPoint.y !== 0)\n        // Sort by y value\n        .sort((a, b) => a.y - b.y)\n        // Drop everything else (x value, y value) and return just a list of hint titles\n        .map((seriesPoint) => seriesPoint && seriesPoint.seriesLabel)\n    );\n  };\n\n  const primaryAxis = useMemo((): AxisOptions<SeriesPoint> => {\n    const formatDateForLabel = (date: string) => {\n      return date.slice(0, 7);\n    };\n\n    const xAxisLabelFormatter = (xValue: number): string => {\n      if (dates[xValue]) {\n        return formatDateForLabel(dates[xValue]);\n      } else {\n        return '';\n      }\n    };\n\n    return {\n      formatters: {\n        scale: xAxisLabelFormatter,\n      },\n      getValue: (datum) => datum.x,\n      scaleType: 'linear',\n    };\n  }, [dates]);\n\n  const secondaryAxes = useMemo((): AxisOptions<SeriesPoint>[] => {\n    const yAxisProperties = {\n      getValue: (datum: SeriesPoint) => {\n        if (datum.y === 0) {\n          return null;\n        } else {\n          return datum.y;\n        }\n      },\n      invert: true,\n      scaleType: 'linear',\n      // This prevents a resize from happening as soon as the chart is loaded\n      tickCount: settings.numberOfLanguages,\n    };\n\n    return [\n      // Left y axis\n      {\n        ...yAxisProperties,\n        curve: D3SigmoidCurve.compression(0.5),\n        formatters: {\n          scale: (value: number) => {\n            return leftYAxisLabels[value - 1];\n          },\n          tooltip: () => {\n            return focusedDatumTooltip;\n          },\n        },\n        showDatumElements: true,\n      } as AxisOptions<SeriesPoint>,\n\n      // Right y axis\n      {\n        ...yAxisProperties,\n        formatters: {\n          scale: (value: number) => {\n            return rightYAxisLabels[value - 1];\n          },\n        },\n        position: 'right',\n      } as AxisOptions<SeriesPoint>,\n    ];\n  }, [focusedDatumTooltip, leftYAxisLabels, rightYAxisLabels]);\n\n  return (\n    <div className=\"chart-container\">\n      <div\n        className=\"chart-content\"\n        style={{\n          // TODO: use more of the available vertical height of the page\n          height: settings.numberOfLanguages * 48,\n          // TODO: move this to Chart.css\n          maxWidth: '800px',\n        }}\n      >\n        {/* Don't show the chart until the data is loaded, otherwise it causes weird behaviour */}\n        {chartData.length > 0 && (\n          <ReactChart\n            options={{\n              data: chartData,\n              getDatumStyle: (datum, status) => {\n                // Work around https://github.com/tannerlinsley/react-charts/issues/266\n                if (datum.secondaryValue === null) {\n                  return {\n                    circle: {\n                      r: 0,\n                    } as CSSProperties,\n                  };\n                } else {\n                  return {};\n                }\n              },\n              getSeriesStyle: (series, status) => {\n                const defaultSeriesStyle = {\n                  circle: {\n                    r: 5,\n                  } as CSSProperties,\n                  color: GitHubColors.get(series.label, true).color,\n                  // Disable default animation of the series point circles \"moving\" into place\n                  transition: 'none',\n                };\n\n                // If a series is focused, return the style for the focused series\n                if (status === 'focused') {\n                  return {\n                    ...defaultSeriesStyle,\n                    circle: {\n                      ...defaultSeriesStyle.circle,\n                      strokeWidth: '4px',\n                    },\n                    line: {\n                      strokeWidth: '4px',\n                    },\n                  };\n                }\n\n                // If a series is focused, return the style for the non-focused series\n                else if (activeSeriesIndex !== -1) {\n                  return {\n                    ...defaultSeriesStyle,\n                    circle: {\n                      ...defaultSeriesStyle.circle,\n                      opacity: '0.5',\n                    },\n                    line: {\n                      opacity: '0.5',\n                    },\n                  };\n                }\n\n                // If no series is focused, return the default style\n                else {\n                  return defaultSeriesStyle;\n                }\n              },\n              // This fixes the hover behaviour, which otherwise sometimes highlights the incorrect series line\n              interactionMode: 'closest',\n              onFocusDatum: (datum) => {\n                // Work around https://github.com/tannerlinsley/react-charts/issues/267\n                if (datum) {\n                  setActiveSeriesIndex(datum.seriesIndex);\n                  setFocusedDatumTooltip(datum.originalDatum.tooltipValue);\n                } else {\n                  setActiveSeriesIndex(-1);\n                }\n              },\n              primaryAxis,\n              // Disable the default horizontal line and label that show when a point is hovered\n              primaryCursor: {\n                showLabel: false,\n                showLine: false,\n              },\n              secondaryAxes,\n              // Disable the default vertical line and label that show when a point is hovered\n              secondaryCursor: {\n                showLabel: false,\n                showLine: false,\n              },\n              tooltip: {\n                // Only show the data for the hovered point in the tooltip\n                groupingMode: 'single',\n              },\n            }}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Button, ButtonProps } from 'semantic-ui-react';\n\nimport './ButtonGroup.css';\nimport { ChartType } from '../helpers/ChartFactory';\n\nexport default function TopButtonGroup(props: {\n  chartType: string | undefined;\n  handleItemClick: (\n    event: React.MouseEvent<HTMLElement>,\n    data: ButtonProps\n  ) => void;\n}) {\n  const chartType = props.chartType;\n\n  return (\n    <Button.Group basic className=\"button-group\">\n      <Button\n        name={ChartType.FastestGrowth}\n        active={chartType === ChartType.FastestGrowth}\n        onClick={props.handleItemClick}\n      >\n        Fastest growth\n      </Button>\n      <Button\n        name={ChartType.MostGrowth}\n        active={chartType === ChartType.MostGrowth}\n        onClick={props.handleItemClick}\n      >\n        Most growth\n      </Button>\n      <Button\n        name={ChartType.TopLanguages}\n        active={chartType === ChartType.TopLanguages}\n        onClick={props.handleItemClick}\n      >\n        Top\n      </Button>\n    </Button.Group>\n  );\n}\n","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { ButtonProps, Container, Grid, Item } from 'semantic-ui-react';\n\nimport BottomButtonGroup from './BottomButtonGroup';\nimport Chart from './Chart';\nimport TopButtonGroup from './TopButtonGroup';\nimport { ChartType } from '../helpers/ChartFactory';\n\nimport './Main.css';\n\nexport default function Main() {\n  // Store the chart type/interval directly in the search params so we don't have to maintain separate state for them\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const defaultChartType = ChartType.MostGrowth;\n  const defaultInterval = 3;\n\n  const handleChartTypeChanged = (\n    _event: React.MouseEvent<HTMLElement>,\n    { name }: ButtonProps\n  ) => {\n    if (name) {\n      // Setting the search params this way allows us to set certain params without overriding the others\n      searchParams.set('chart_type', name);\n      setSearchParams(searchParams);\n    }\n  };\n\n  const handleIntervalChanged = (\n    _event: React.MouseEvent<HTMLElement>,\n    { value }: ButtonProps\n  ) => {\n    searchParams.set('interval', value);\n    setSearchParams(searchParams);\n  };\n\n  return (\n    <Container>\n      <Grid centered padded>\n        <Item.Group className=\"main\">\n          <Item.Content>\n            <Grid centered className=\"button-group-grid\">\n              <TopButtonGroup\n                chartType={searchParams.get('chart_type') ?? defaultChartType}\n                handleItemClick={handleChartTypeChanged}\n              />\n            </Grid>\n            <Chart\n              chartType={searchParams.get('chart_type') ?? defaultChartType}\n              intervalInMonths={Number(\n                searchParams.get('interval') || defaultInterval\n              )}\n            />\n            <Grid centered className=\"button-group-grid\">\n              <BottomButtonGroup\n                handleItemClick={handleIntervalChanged}\n                intervalInMonths={Number(\n                  searchParams.get('interval') || defaultInterval\n                )}\n              />\n            </Grid>\n          </Item.Content>\n        </Item.Group>\n      </Grid>\n    </Container>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Container, Icon, Menu, Popup } from 'semantic-ui-react';\n\nimport './Header.css';\n\nexport default function Header() {\n  return (\n    <Menu attached borderless inverted>\n      <Container>\n        <Menu.Item className=\"header-title\" fitted=\"horizontally\" header>\n          {/* Wipe the search params to reset the chart back to the default state */}\n          <Link to={{ search: '' }}>Programming language trends</Link>\n        </Menu.Item>\n\n        <Menu.Menu position=\"right\">\n          <Popup\n            on=\"click\"\n            trigger={\n              <Menu.Item icon>\n                <Icon name=\"help circle\" size=\"big\" />\n              </Menu.Item>\n            }\n          >\n            <Popup.Content>\n              <h3>How the data is calculated</h3>\n              <p>\n                First, a base numerical value for a given language and date is\n                calculated by adding the total number of GitHub repositories to\n                the total number of Stack Overflow tags for that language up to\n                that day.\n              </p>\n              <h4>Fastest growth</h4>\n              <p>\n                Languages with the highest percentage change compared to the\n                previous date. Note that scores under a{' '}\n                <a href=\"https://github.com/bmaupin/langtrends-data/blob/96b8148cc525d129d11a7a2a357429afe0b6ee63/classes/settings.json#L3\">\n                  certain threshold\n                </a>{' '}\n                are filtered out to reduce{' '}\n                <a href=\"https://xkcd.com/1102/\">dubious claims</a>.\n              </p>\n              <h4>Most growth</h4>\n              <p>\n                Languages with the highest numerical change compared to the\n                previous date.\n              </p>\n              <h4>Top</h4>\n              <p>\n                Languages with the total highest value for a particular given\n                date.\n              </p>\n            </Popup.Content>\n          </Popup>\n          <Menu.Item href=\"https://github.com/bmaupin/langtrends\" icon>\n            <Icon name=\"github\" size=\"big\" />\n          </Menu.Item>\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  );\n}\n","import React from 'react';\n\nimport Main from './Main';\nimport Header from './Header';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './components/App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}