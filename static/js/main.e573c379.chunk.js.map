{"version":3,"sources":["helpers/ApiHelper.js","helpers/TopLanguagesChart.js","helpers/FastestGrowingLanguagesChart.js","helpers/ChartData.js","helpers/D3SigmoidCurve.js","components/Chart.js","components/ChartBottomMenu.js","components/ChartTopMenu.js","components/ChartGroup.js","components/TopMenu.js","components/App.js","registerServiceWorker.js","index.js"],"names":["ApiHelper","intervalInMonths","numberOfDates","NUMBER_OF_DATES","dates","_getLatestDateFromApi","currentDate","_getEarliestDateFromApi","earliestDate","i","push","_subtractMonthsUTC","reverse","apiFilter","order","limit","callApi","scoresFromApi","Date","date","bypassCache","monthsToSubtract","newDate","setUTCMonth","getUTCMonth","filter","apiUrl","encodeURI","concat","process","JSON","stringify","window","self","fetch","response","_getCache","cache","match","add","json","currentYearMonthString","_getCurrentYearMonthString","caches","has","open","_getLatestYearMonthStringFromApi","latestYearMonthString","_deleteAllCaches","toISOString","slice","keys","cacheName","delete","languages","where","and","or","Array","from","map","languageId","include","NUMBER_OF_LANGUAGES","TopLanguagesChart","interval","Object","classCallCheck","this","_interval","_dates","buildDates","_getLanguages","getDates","getScoresForSeries","scoresForSeries","formattedSeriesData","_formatDataForChart","lastDate","topScores","topLanguages","Map","length","set","language","id","name","scores","formattedScores","forEach","languageName","title","data","_loop","points","languageData","find","x","y","FastestGrowingLanguagesChart","minimumScore","_minimumScore","_getDatesForCalculations","datesForCalculations","_getAllScores","scoresByDate","_organizeScoresByDate","percentageChangesByDate","_getPercentageChangesByDate","_calculateTopPercentageChanges","topPercentageChanges","previousDate","percentageChange","_calculatePercentageChange","_convertNonFiniteToNull","datesForChart","sortedKeys","sort","a","b","allFastestGrowingLanguages","_getAllFastestGrowingLanguages","_iterator","Symbol","iterator","_iteratorNormalCompletion","_step","next","done","value","formattedScoresIndex","_iterator2","_iteratorNormalCompletion2","_step2","rank","hasOwnProperty","indexOf","hintTitle","hintValue","Math","round","oldValue","newValue","number","Number","isFinite","includes","ChartData","series","yDomain","_series","_yDomain","chartType","CHART_TYPES","TOP_LANGUAGES","FASTEST_OVER_100","FASTEST_OVER_1000","chart","Error","getSeries","D3SigmoidCurve","context","compression","_context","_compression","prototype","areaStart","_line","areaEnd","NaN","lineStart","_point","lineEnd","closePath","point","lineTo","moveTo","that","bezierCurveTo","_prevX","_prevY","helpers_D3SigmoidCurve","custom","cardinal","Chart","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","chartData","hoveredSeriesIndex","_onValueMouseOut","bind","assertThisInitialized","_onValueMouseOver","_xAxisLabelFormatter","setChartData","prevProps","fromType","leftYAxisLabels","_generateLeftYAxisLabels","rightYAxisLabels","_generateRightYAxisLabels","setState","index","_value","_formatDateForLabel","_this2","d3sigmoidcurve","react_default","createElement","className","es","height","margin","left","right","tickFormat","tickTotal","orientation","v","entry","curve","getNull","d","key","color","GitHubColors","get","opacity","onValueMouseOut","onValueMouseOver","datapoint","strokeWidth","format","_formatHint","renderLoadingSpinner","Dimmer","Dimmable","blurring","dimmed","active","inverted","Loader","size","Image","src","Component","ChartBottomMenu","Menu","secondary","Item","onClick","handleItemClick","ChartTopMenu","activeItem","e","_ref","ChartGroup","handleIntervalChanged","_event","Container","Grid","centered","padded","Group","Content","ChartTopMenu_ChartTopMenu","Chart_Chart","TopMenu","attached","borderless","fitted","header","position","href","icon","Icon","App","TopMenu_TopMenu","ChartGroup_ChartGroup","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","components_App","document","getElementById","URL","origin","addEventListener","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"+WAGMA,kJACoBC,oGAAkBC,iCAAgBF,EAAUG,gBAC9DC,EAAQ,YACYJ,EAAUK,sCAA9BC,kBACqBN,EAAUO,iCAA/BC,SAEKC,EAAI,cAAGA,EAAIP,yBACdI,GAAeE,wDAInBJ,EAAMM,KAAKJ,GACXA,EAAcN,EAAUW,mBAAmBL,EAAaL,WANvBQ,oDAS5BL,EAAMQ,mRAIPC,EAAY,CAChBC,MAAO,WACPC,MAAO,YAEiBf,EAAUgB,QAAQH,iBAAxCI,2BAEG,IAAIC,KAAKD,EAAc,GAAGE,0LAGAC,kFAC3BP,EAAY,CAChBC,MAAO,YACPC,MAAO,YAEiBf,EAAUgB,QAAQH,EAAWO,iBAAnDH,2BAEG,IAAIC,KAAKD,EAAc,GAAGE,gJAGTA,EAAME,GAC9B,IAAIC,EAAU,IAAIJ,KAAKC,GAEvB,OADAG,EAAQC,YAAYD,EAAQE,cAAgBH,GACrCC,0EAGYG,EAAQL,gFACrBM,EAASC,UAAS,GAAAC,OAhDPC,mCAgDO,uBAAAD,OAAsCE,KAAKC,UAAUN,GAArD,kBAAAG,OA/CVC,sEAkDVT,GAAiB,WAAYY,OAAOC,qCACrBC,MAAMR,UAAvBS,gDAEoBnC,EAAUoC,0BAAxBC,mBACWA,EAAMC,MAAMZ,cACL,qBADxBS,4CAEQE,EAAME,IAAIb,4BACCW,EAAMC,MAAMZ,WAA7BS,0CAIGA,EAASK,oQAKVC,EAAyBzC,EAAU0C,sCAC/BC,OAAOC,IAAIH,qDACNE,OAAOE,KAAKJ,kEAISzC,EAAU8C,8CAAxCC,YACwBN,oCACtBzC,EAAUgD,4CACHL,OAAOE,KAAKJ,qEAIdE,OAAOE,KAAKE,+LAIzB,OAAO,IAAI7B,MAAO+B,cAAcC,MAAM,EAAG,sLAI3BlD,EAAUK,uBAAsB,0CAAO4C,cAAcC,MAAM,EAAG,gTAIhDP,OAAOQ,0GAA1BC,oBACDT,OAAOU,OAAOD,ydAIQE,EAAWlD,gFACnCS,EAAY,CAChB0C,MAAO,CACLC,IAAK,CACH,CACEC,GAAIC,MAAMC,KAAKL,EAAUH,QAAQS,IAAI,SAAAC,GAAU,MAAK,CAACA,WAAYA,MAEnE,CACEJ,GAAIrD,EAAMwD,IAAI,SAAAzC,GAAI,MAAK,CAACA,KAAMA,EAAK8B,oBAKzCa,QAAS,WAEThD,MAAO,qBAGId,EAAUgB,QAAQH,oJAInCb,EAAUG,gBAAkB,GAC5BH,EAAU+D,oBAAsB,GAEjB/D,iBCxHMgE,aACnB,SAAAA,EAAYC,GAAWC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACrBI,KAAKC,UAAYJ,oKAIU,qBAAhBG,KAAKE,uCACMtE,EAAUuE,WAAWH,KAAKC,kBAA9CD,KAAKE,8CAEAF,KAAKE,gRAIYF,KAAKI,8BAAvBlB,cACwBtD,OAA6BsD,WAAiBc,KAAKK,oDAAzCC,uDAAlCC,SACFC,EAAsBR,KAAKS,oBAAoBvB,EAAWqB,qBAEvDC,wRAIiBR,KAAKK,+BAAmB,WAAPvB,+BAApC4B,OAECrD,EAAS,CACb8B,MAAO,CACLpC,KAAM2D,EAAS7B,eAGjBa,QAAS,WACThD,MAAO,cACPC,MAAOf,EAAU+D,8BAEG/D,EAAUgB,QAAQS,UAIxC,IAJIsD,SAGAC,EAAe,IAAIC,IACdxE,EAAI,EAAGA,EAAIsE,EAAUG,OAAQzE,IACpCuE,EAAaG,IAAIJ,EAAUtE,GAAG2E,SAASC,GAAIN,EAAUtE,GAAG2E,SAASE,+BAG5DN,kJAGW1B,EAAWiC,GAC7B,IAAIC,EAAkB,GAEtBlC,EAAUmC,QAAQ,SAAAC,GAChBF,EAAgB9E,KACd,CACEiF,MAAOD,EACPE,KAAM,OAKZ,IAZqC,IAAAC,EAAA,SAY5BpF,GACP,IAAMiF,EAAeH,EAAO9E,GAAG2E,SAASE,KAClCQ,EAASP,EAAO9E,GAAGqF,OAErBC,EAAeP,EAAgBQ,KAAK,SAAAD,GAAY,OAAIA,EAAaJ,QAAUD,IAE/EK,EAAaH,KAAKlF,KAChB,CACEuF,EAAGF,EAAaH,KAAKV,OACrBgB,EAAGJ,KATArF,EAAI,EAAGA,EAAI8E,EAAOL,OAAQzE,IAAKoF,EAA/BpF,GAcT,OAAO+E,WCrEUW,aACnB,SAAAA,EAAYlC,EAAUmC,GAAelC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,GACnC/B,KAAKC,UAAYJ,EACjBG,KAAKiC,cAAgBD,iLAKPhC,KAAKkC,kEAA4BpD,MAAM,0QAI1B,qBAAhBkB,KAAKE,uCACItE,EAAUuE,WAAWH,KAAKC,UAAWrE,EAAUG,gBAAkB,UAA/EC,SAEJgE,KAAKE,OAASlE,EAAMwD,IAAI,SAAAzC,GAAI,OAAIA,EAAK8B,gDAGhCmB,KAAKE,sRAIuBF,KAAKkC,yCAAlCC,kBACsBJ,EAA6BK,cAAcD,iBAAjEtF,SACAwF,EAAeN,EAA6BO,sBAAsBzF,GAClE0F,EAA0BvC,KAAKwC,4BAA4BH,EAAcF,aAC5CnC,KAAKyC,+BAA+BF,kBAAjEG,mBAC4B1C,KAAKS,oBAAoBiC,kBAArDlC,2BAECA,0JAgCmB6B,EAAcF,GAIxC,IAHA,IAAII,EAA0B,GAGrBlG,EAAI,EAAGA,EAAI8F,EAAqBrB,OAAQzE,IAAK,CACpD,IAAIU,EAAOoF,EAAqB9F,GAC5BsG,EAAeR,EAAqB9F,EAAI,GAG5C,IAAK,IAAIiF,KAFTiB,EAAwBxF,GAAQ,GAEPsF,EAAatF,GAGpC,GAAIsF,EAAatF,GAAMuE,GAAgBtB,KAAKiC,cAAe,CACzD,IAAIW,EAAmBb,EAA6Bc,2BAClDR,EAAaM,GAAcrB,GAC3Be,EAAatF,GAAMuE,IAIrBsB,EAAmBb,EAA6Be,wBAAwBF,GAExEL,EAAwBxF,GAAMuE,GAAgBsB,GAKpD,OAAOL,iGAc4BA,+FACPvC,KAAKK,kBAGjC,IAHM0C,SACFL,EAAuB,cAElBrG,GACP,IAAIU,EAAOgG,EAAc1G,GAEzBqG,EAAqB3F,GAAQ,GAO7B,IAJA,IAAIiG,EAAalD,OAAOf,KAAKwD,EAAwBxF,IAAOkG,KAAK,SAAUC,EAAGC,GAC5E,OAAQZ,EAAwBxF,GAAMoG,GAAKZ,EAAwBxF,GAAMmG,KAGlE7G,EAAI,EAAGA,EAAIT,EAAU+D,oBAAqBtD,IAAK,CACtD,IAAIiF,EAAe0B,EAAW3G,GAC9BqG,EAAqB3F,GAAMuE,GAAgBiB,EAAwBxF,GAAMuE,KAZpEjF,EAAI,EAAGA,EAAI0G,EAAcjC,OAAQzE,IAAKoF,EAAtCpF,4BAgBFqG,0LAGiBA,+GAIxB,IAHItB,EAAkB,GAChBgC,EAA6BrB,EAA6BsB,+BAA+BX,+BAE/FY,EAAyBF,EAAzBG,OAAAC,cAAAC,GAAAC,EAAAJ,EAAAK,QAAAC,MAAAH,GAAA,EAASnC,EAA4CoC,EAAAG,MACnDzC,EAAgB9E,KACd,CACEiF,MAAOD,EACPE,KAAM,6PAKcxB,KAAKK,mBAA3B0C,SACK1G,EAAI,eAAGA,EAAI0G,EAAcjC,yBAIhC,IAHI/D,EAAOgG,EAAc1G,GAErByH,EAAuB,+BAC3BC,EAAyBX,EAAzBG,OAAAC,cAAAQ,GAAAC,EAAAF,EAAAJ,QAAAC,MAAAI,GAAA,EAAS1C,EAA4C2C,EAAAJ,MAC/CjB,EAAmB,KACnBsB,EAAO,KACPxB,EAAqB3F,GAAMoH,eAAe7C,KAC5CsB,EAAmBF,EAAqB3F,GAAMuE,GAE9C4C,EAAOpE,OAAOf,KAAK2D,EAAqB3F,IAAOqH,QAAQ9C,GAAgB,GAGzEF,EAAgB0C,GAAsBtC,KAAKlF,KACzC,CACEuF,EAAGxF,EAEHyF,EAAGoC,EAEHG,UAAW/C,EAEXgD,UAAS,GAAA9G,OAAK+G,KAAKC,MAAM5B,GAAhB,cAGbkB,8OAxBsCzH,qDA4BnC+E,2OAtIkBpF,gFACnBS,EAAY,CAChB0C,MAAO,CACLE,GAAIrD,EAAMwD,IAAI,SAAAzC,GAAI,MAAK,CAAEA,KAAMA,MAGjC2C,QAAS,qBAGE9D,EAAUgB,QAAQH,uLAIJ0E,GAE3B,IADA,IAAIkB,EAAe,GACVhG,EAAI,EAAGA,EAAI8E,EAAOL,OAAQzE,IAAK,CACtC,IAAMU,EAAOoE,EAAO9E,GAAGU,KACjBuE,EAAeH,EAAO9E,GAAG2E,SAASE,KAClCQ,EAASP,EAAO9E,GAAGqF,OAEpBW,EAAa8B,eAAepH,KAC/BsF,EAAatF,GAAQ,IAEvBsF,EAAatF,GAAMuE,GAAgBI,EAGrC,OAAOW,qDAgCyBoC,EAAUC,GAC1C,OAAOA,EAAWD,EAAW,oDAGAE,GAI7B,OAHKC,OAAOC,SAASF,KACnBA,EAAS,MAEJA,yDAuE6BjC,GACpC,IAAIU,EAA6B,GAEjC,IAAK,IAAIrG,KAAQ2F,EACf,IAAK,IAAIpB,KAAgBoB,EAAqB3F,GACvCqG,EAA2B0B,SAASxD,IACvC8B,EAA2B9G,KAAKgF,GAKtC,OAAO8B,WClLL2B,aACJ,SAAAA,EAAY/I,EAAOgJ,EAAQC,GAAUnF,OAAAC,EAAA,EAAAD,CAAAE,KAAA+E,GACnC/E,KAAKE,OAASlE,EACdgE,KAAKkF,QAAUF,EACfhF,KAAKmF,SAAWF,oDA8BhB,OAAOjF,KAAKE,sCAIZ,OAAOF,KAAKkF,wCAIZ,OAAOlF,KAAKmF,oFAnCQC,EAAWvF,oFAGxBuF,gBACAL,EAAUM,YAAYC,uBAGtBP,EAAUM,YAAYE,0BAKtBR,EAAUM,YAAYG,2CAPzBC,EAAQ,IAAI7F,EAAkBC,sCAG9B4F,EAAQ,IAAI1D,EAA6BlC,EAAU,KAEnDoF,EAAU,CAACrJ,EAAU+D,oBAAqB,sCAG1C8F,EAAQ,IAAI1D,EAA6BlC,EAAU,KACnDoF,EAAU,CAACrJ,EAAU+D,oBAAqB,sCAGpC,IAAI+F,MAAJ,uBAAAlI,OAAiC4H,6BAGzBK,EAAMpF,0BAApBrE,mBACeyJ,EAAME,2BAArBX,2BAEG,IAAID,EAAU/I,EAAOgJ,EAAQC,8GAgBxCF,EAAUM,YAAc,CACtBC,cAAe,eACfC,iBAAkB,iBAClBC,kBAAmB,mBAGNT,QCzCf,SAASa,EAAeC,EAASC,GAC/B9F,KAAK+F,SAAWF,EAChB7F,KAAKgG,aAAeF,EAGtBF,EAAeK,UAAY,CACzBC,UAAW,WACTlG,KAAKmG,MAAQ,GAEfC,QAAS,WACPpG,KAAKmG,MAAQE,KAEfC,UAAW,WACTtG,KAAKuG,OAAS,GAEhBC,QAAS,YACHxG,KAAKmG,OAAyB,IAAfnG,KAAKmG,OAA+B,IAAhBnG,KAAKuG,SAAevG,KAAK+F,SAASU,YACzEzG,KAAKmG,MAAQ,EAAInG,KAAKmG,OAExBO,MAAO,SAAS7E,EAAGC,GAGjB,OAFAD,GAAKA,EACLC,GAAKA,EACG9B,KAAKuG,QACX,KAAK,EAAGvG,KAAKuG,OAAS,EAAGvG,KAAKmG,MAAQnG,KAAK+F,SAASY,OAAO9E,EAAGC,GAAK9B,KAAK+F,SAASa,OAAO/E,EAAGC,GAAI,MAC/F,KAAK,EAAG9B,KAAKuG,OAAS,EACtB,SAxCN,SAAeM,EAAMhF,EAAGC,GACtB+E,EAAKd,SAASe,cACZD,EAAKE,QAAWlF,EAAIgF,EAAKE,QAAUF,EAAKb,aACxCa,EAAKG,OACLnF,GAAMA,EAAIgF,EAAKE,QAAUF,EAAKb,aAC9BlE,EACAD,EACAC,GAiCW4E,CAAM1G,KAAM6B,EAAGC,GAE1B9B,KAAK+G,OAASlF,EACd7B,KAAKgH,OAASlF,IAIH,IAAAmF,EAAA,SAAUC,EAAOpB,GAC9B,SAASqB,EAAStB,GAChB,OAAO,IAAID,EAAeC,EAASC,GAOrC,OAJAqB,EAASrB,YAAc,SAASA,GAC9B,OAAOoB,EAAOpB,IAGTqB,EATM,CAUZ,KCrCkBC,6BACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAxH,OAAAC,EAAA,EAAAD,CAAAE,KAAAoH,IACjBE,EAAAxH,OAAAyH,EAAA,EAAAzH,CAAAE,KAAAF,OAAA0H,EAAA,EAAA1H,CAAAsH,GAAAK,KAAAzH,KAAMqH,KAEDK,MAAQ,CACXC,UAAW,KACX3L,MAAO,GACPsI,UAAW,KACXsD,mBAAoB,KACpB3C,QAAS,MAGXqC,EAAKO,iBAAmBP,EAAKO,iBAAiBC,KAAtBhI,OAAAiI,EAAA,EAAAjI,CAAAwH,IACxBA,EAAKU,kBAAoBV,EAAKU,kBAAkBF,KAAvBhI,OAAAiI,EAAA,EAAAjI,CAAAwH,IACzBA,EAAKW,qBAAuBX,EAAKW,qBAAqBH,KAA1BhI,OAAAiI,EAAA,EAAAjI,CAAAwH,IAbXA,2MAiBXtH,KAAKkI,oMAGYC,sEACnBnI,KAAKqH,MAAMxL,mBAAqBsM,EAAUtM,iDACtCmE,KAAKkI,2RAMWnD,EAAUqD,SAASrD,EAAUM,YAAYG,kBAAmBxF,KAAKqH,MAAMxL,yBAAzF8L,SACAU,EAAkBjB,EAAMkB,yBAAyBX,EAAU3C,QAC3DuD,EAAmBnB,EAAMoB,0BAA0Bb,EAAU3C,QAGnEhF,KAAKyI,SAAS,CACZd,UAAWA,EAAU3C,OACrBhJ,MAAO2L,EAAU3L,MACjBqM,gBAAiBA,EACjBE,iBAAkBA,EAClBtD,QAAS0C,EAAU1C,gJAyBXpB,GACV,MAAO,CACL,CACEtC,MAAOsC,EAAMQ,UACbR,MAAOA,EAAMS,uDAMjBtE,KAAKyI,SAAS,CACZnE,UAAW,KACXsD,mBAAoB,iDAKN/D,EAAO6E,GACvB1I,KAAKyI,SAAS,CACZnE,UAAWT,EACX+D,mBAAoBc,iDAKHC,EAAQD,GAC3B,OAAOtB,EAAMwB,oBAAoB5I,KAAK0H,MAAM1L,MAAM0M,qCAmB3C,IAAAG,EAAA7I,KACP,GAAKA,KAAK0H,MAAMC,UAGT,CACL,IAAMmB,EAAiBlD,EAAeE,YAAY,IAClD,OACEiD,EAAA7F,EAAA8F,cAAA,OAAKC,UAAU,mBACbF,EAAA7F,EAAA8F,cAAA,OAAKC,UAAU,iBACbF,EAAA7F,EAAA8F,cAACE,EAAA,EAAD,CACEC,OAAwC,GAAhCvN,EAAU+D,oBAClByJ,OAAQ,CACNC,KAAM,GACNC,MAAO,IAETrE,QAASjF,KAAK0H,MAAMzC,SAEpB8D,EAAA7F,EAAA8F,cAACE,EAAA,EAAD,MACAH,EAAA7F,EAAA8F,cAACE,EAAA,EAAD,MACAH,EAAA7F,EAAA8F,cAACE,EAAA,EAAD,CAAOK,WAAYvJ,KAAKiI,qBAAsBuB,UAAWxJ,KAAK0H,MAAM1L,MAAM8E,SAC1EiI,EAAA7F,EAAA8F,cAACE,EAAA,EAAD,CAAOO,YAAY,OAAOF,WAAY,SAACG,EAAGrN,GAAJ,OAAUwM,EAAKnB,MAAMW,gBAAgBhM,MAC3E0M,EAAA7F,EAAA8F,cAACE,EAAA,EAAD,CAAOO,YAAY,QAAQF,WAAY,SAACG,EAAGrN,GAAJ,OAAUwM,EAAKnB,MAAMa,iBAAiBlM,MAC5E2D,KAAK0H,MAAMC,UAAUnI,IAAI,SAACmK,EAAOtN,GAAR,OACxB0M,EAAA7F,EAAA8F,cAACE,EAAA,EAAD,CACEU,MAAOd,EACPe,QAAS,SAACC,GAAD,OAAe,OAARA,EAAEhI,GAClBiI,IAAKJ,EAAMpI,MACXyI,MAAOC,IAAaC,IAAIP,EAAMpI,OAAO,GAAMyI,MAC3CxI,KAAMmI,EAAMnI,KACZ2I,QAAUtB,EAAKnB,MAAME,oBAAsBiB,EAAKnB,MAAME,qBAAuBvL,EAAQ,GAAJ,EACjF+N,gBAAiBvB,EAAKhB,iBACtBwC,iBAAkB,SAACC,GAAD,OAAezB,EAAKb,kBAAkBsC,EAAWjO,IACnEkO,YAAa1B,EAAKnB,MAAME,oBAAsBiB,EAAKnB,MAAME,qBAAuBvL,EAAI,EAAI,SAG3F2D,KAAK0H,MAAMpD,WACVyE,EAAA7F,EAAA8F,cAACE,EAAA,EAAD,CACEsB,OAAQxK,KAAKyK,YACb5G,MAAO7D,KAAK0H,MAAMpD,eApC9B,OAAO8C,EAAMsD,0EApEe1F,GAC9B,OAAOA,EAEJxF,IAAI,SAAAmC,GAAY,OAAIA,EAAaH,KAAK,KAEtCyB,KAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAErB,EAAIoB,EAAEpB,IAEvBtC,IAAI,SAAAmC,GAAY,OAAIA,GAAgBA,EAAa0C,8DAIrBW,GAC/B,OAAOA,EAEJxF,IAAI,SAAAmC,GAAY,OAAIA,EAAaH,KAAKG,EAAaH,KAAKV,OAAS,KAEjEmC,KAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAErB,EAAIoB,EAAEpB,IAEvBtC,IAAI,SAAAmC,GAAY,OAAIA,GAAgBA,EAAa0C,wDAgC3BtH,GACzB,OAAOA,EAAK+B,MAAM,EAAG,kDAIrB,OACEiK,EAAA7F,EAAA8F,cAAC2B,EAAA,EAAOC,SAAR,CAAiBC,UAAQ,EAACC,QAAM,GAC9B/B,EAAA7F,EAAA8F,cAAC2B,EAAA,EAAD,CAAQI,QAAM,EAACC,UAAQ,GACrBjC,EAAA7F,EAAA8F,cAACiC,EAAA,EAAD,CAAQC,KAAK,aAGfnC,EAAA7F,EAAA8F,cAACmC,EAAA,EAAD,CAAOC,IAAI,gDAxGgBC,uBCjBpB,SAASC,EAAgBjE,GACtC,IAAMxL,EAAmBwL,EAAMxL,iBAE/B,OACEkN,EAAA7F,EAAA8F,cAACuC,EAAA,EAAD,CAAMC,WAAS,GACbzC,EAAA7F,EAAA8F,cAACuC,EAAA,EAAKE,KAAN,CAAWvK,KAAK,UAAU2C,MAAM,IAAIkH,OAA6B,IAArBlP,EAAwB6P,QAASrE,EAAMsE,kBACnF5C,EAAA7F,EAAA8F,cAACuC,EAAA,EAAKE,KAAN,CAAWvK,KAAK,YAAY2C,MAAM,IAAIkH,OAA6B,IAArBlP,EAAwB6P,QAASrE,EAAMsE,kBACrF5C,EAAA7F,EAAA8F,cAACuC,EAAA,EAAKE,KAAN,CAAWvK,KAAK,SAAS2C,MAAM,KAAKkH,OAA6B,KAArBlP,EAAyB6P,QAASrE,EAAMsE,uBCPrEC,6MACnBlE,MAAQ,CAAEmE,WAAY,qBAEtBF,gBAAkB,SAACG,EAADC,GAAA,IAAM7K,EAAN6K,EAAM7K,KAAN,OAAiBoG,EAAKmB,SAAS,CAAEoD,WAAY3K,6EAEtD,IACC2K,EAAe7L,KAAK0H,MAApBmE,WAER,OACE9C,EAAA7F,EAAA8F,cAACuC,EAAA,EAAD,CAAMC,WAAS,GACbzC,EAAA7F,EAAA8F,cAACuC,EAAA,EAAKE,KAAN,CAAWvK,KAAK,kBAAkB6J,OAAuB,oBAAfc,EAAkCH,QAAS1L,KAAK2L,0BAVxDN,aCMrBW,sBACnB,SAAAA,EAAY3E,GAAO,IAAAC,EAAA,OAAAxH,OAAAC,EAAA,EAAAD,CAAAE,KAAAgM,IACjB1E,EAAAxH,OAAAyH,EAAA,EAAAzH,CAAAE,KAAAF,OAAA0H,EAAA,EAAA1H,CAAAkM,GAAAvE,KAAAzH,KAAMqH,KAEDK,MAAQ,CACX7L,iBAAkB,GAGpByL,EAAK2E,sBAAwB3E,EAAK2E,sBAAsBnE,KAA3BhI,OAAAiI,EAAA,EAAAjI,CAAAwH,IAPZA,qFAUG4E,KAAmB,IAATrI,EAASkI,EAATlI,MAC9B7D,KAAKyI,SAAS,CAAE5M,iBAAkB+I,OAAOf,sCAIzC,OACEkF,EAAA7F,EAAA8F,cAACmD,EAAA,EAAD,KACEpD,EAAA7F,EAAA8F,cAACoD,EAAA,EAAD,CAAMC,UAAQ,EAACC,QAAM,GACnBvD,EAAA7F,EAAA8F,cAACyC,EAAA,EAAKc,MAAN,CAAYtD,UAAU,eACpBF,EAAA7F,EAAA8F,cAACyC,EAAA,EAAKe,QAAN,KACEzD,EAAA7F,EAAA8F,cAACoD,EAAA,EAAD,CAAMC,UAAQ,EAACC,QAAM,GACnBvD,EAAA7F,EAAA8F,cAACyD,EAAD,OAEF1D,EAAA7F,EAAA8F,cAAC0D,EAAD,CACE7Q,iBAAkBmE,KAAK0H,MAAM7L,mBAE/BkN,EAAA7F,EAAA8F,cAACoD,EAAA,EAAD,CAAMC,UAAQ,EAACC,QAAM,GACnBvD,EAAA7F,EAAA8F,cAACsC,EAAD,CACEK,gBAAiB3L,KAAKiM,sBACtBpQ,iBAAkBmE,KAAK0H,MAAM7L,+BA9BPwP,sBCNnBsB,mLAEjB,OACE5D,EAAA7F,EAAA8F,cAACuC,EAAA,EAAD,CAAMqB,UAAQ,EAACC,YAAU,EAAC7B,UAAQ,GAChCjC,EAAA7F,EAAA8F,cAACmD,EAAA,EAAD,KACEpD,EAAA7F,EAAA8F,cAACuC,EAAA,EAAKE,KAAN,CAAWqB,OAAO,eAAeC,QAAM,GAAvC,+BAIAhE,EAAA7F,EAAA8F,cAACuC,EAAA,EAAKA,KAAN,CAAWyB,SAAS,SAClBjE,EAAA7F,EAAA8F,cAACuC,EAAA,EAAKE,KAAN,CAAWwB,KAAK,wCAAwCC,MAAI,GAC1DnE,EAAA7F,EAAA8F,cAACmE,EAAA,EAAD,CAAMjM,KAAK,SAASgK,KAAK,mBAXFG,aCatB+B,mLATX,OACErE,EAAA7F,EAAA8F,cAAA,OAAKC,UAAU,OACbF,EAAA7F,EAAA8F,cAACqE,EAAD,MACAtE,EAAA7F,EAAA8F,cAACsE,EAAD,cALUjC,aCKZkC,EAAcC,QACW,cAA7B5P,OAAO6P,SAASC,UAEe,UAA7B9P,OAAO6P,SAASC,UAEhB9P,OAAO6P,SAASC,SAASxP,MACvB,2DAsCN,SAASyP,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzG,QACfmG,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KC1EjEC,IAASC,OAAO7F,EAAA7F,EAAA8F,cAAC6F,EAAD,MAASC,SAASC,eAAe,SDelC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIvR,cAAwBG,OAAO6P,UAC3CwB,SAAWrR,OAAO6P,SAASwB,OAIvC,OAGFrR,OAAOsR,iBAAiB,OAAQ,WAC9B,IAAMtB,EAAK,GAAApQ,OAAMC,cAAN,sBAEP8P,GAiDV,SAAiCK,GAE/B9P,MAAM8P,GACHI,KAAK,SAAAjQ,GAGkB,MAApBA,EAASoR,SACuD,IAAhEpR,EAASqR,QAAQlF,IAAI,gBAAgB9F,QAAQ,cAG7CyJ,UAAUC,cAAcuB,MAAMrB,KAAK,SAAAC,GACjCA,EAAaqB,aAAatB,KAAK,WAC7BpQ,OAAO6P,SAAS8B,aAKpB5B,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEArEAgB,CAAwB5B,GAIxBC,UAAUC,cAAcuB,MAAMrB,KAAK,WACjCO,QAAQC,IACN,+GAMJb,EAAgBC,MC1CxB6B","file":"static/js/main.e573c379.chunk.js","sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3000';\nconst API_TOKEN = process.env.REACT_APP_API_TOKEN || null;\n\nclass ApiHelper {\n  static async buildDates(intervalInMonths, numberOfDates = ApiHelper.NUMBER_OF_DATES) {\n    let dates = [];\n    let currentDate = await ApiHelper._getLatestDateFromApi();\n    let earliestDate = await ApiHelper._getEarliestDateFromApi();\n\n    for (let i = 0; i < numberOfDates; i++) {\n      if (currentDate <= earliestDate) {\n        break;\n      }\n\n      dates.push(currentDate);\n      currentDate = ApiHelper._subtractMonthsUTC(currentDate, intervalInMonths);\n    }\n\n    return dates.reverse();\n  }\n\n  static async _getEarliestDateFromApi() {\n    const apiFilter = {\n      order: 'date ASC',\n      limit: 1\n    };\n    let scoresFromApi = await ApiHelper.callApi(apiFilter);\n\n    return new Date(scoresFromApi[0].date);\n  }\n\n  static async _getLatestDateFromApi(bypassCache) {\n    const apiFilter = {\n      order: 'date DESC',\n      limit: 1\n    };\n    let scoresFromApi = await ApiHelper.callApi(apiFilter, bypassCache);\n\n    return new Date(scoresFromApi[0].date);\n  }\n\n  static _subtractMonthsUTC(date, monthsToSubtract) {\n    let newDate = new Date(date);\n    newDate.setUTCMonth(newDate.getUTCMonth() - monthsToSubtract);\n    return newDate;\n  }\n\n  static async callApi(filter, bypassCache) {\n    const apiUrl = encodeURI(`${API_BASE_URL}/api/scores?filter=${JSON.stringify(filter)}&access_token=${API_TOKEN}`);\n    let response;\n\n    if (bypassCache || !('caches' in window.self)) {\n      response = await fetch(apiUrl);\n    } else {\n      const cache = await ApiHelper._getCache();\n      response = await cache.match(apiUrl);\n      if (typeof response === 'undefined') {\n        await cache.add(apiUrl);\n        response = await cache.match(apiUrl);\n      }\n    }\n\n    return response.json();\n  }\n\n  static async _getCache() {\n    // If there's a cache matching the current year/month, return it\n    const currentYearMonthString = ApiHelper._getCurrentYearMonthString();\n    if (await caches.has(currentYearMonthString)) {\n      return await caches.open(currentYearMonthString);\n    }\n\n    // If the latest year/month in the API is current, delete all old caches and return a new one for the current year/month\n    const latestYearMonthString = await ApiHelper._getLatestYearMonthStringFromApi();\n    if (latestYearMonthString === currentYearMonthString) {\n      await ApiHelper._deleteAllCaches();\n      return await caches.open(currentYearMonthString);\n    }\n\n    // If we end up here, return a cache for the latest year/month in the API\n    return await caches.open(latestYearMonthString);\n  }\n\n  static _getCurrentYearMonthString() {\n    return new Date().toISOString().slice(0, 7);\n  }\n\n  static async _getLatestYearMonthStringFromApi() {\n    return (await ApiHelper._getLatestDateFromApi(true)).toISOString().slice(0, 7);\n  }\n\n  static async _deleteAllCaches() {\n    for (let cacheName of await caches.keys()) {\n      await caches.delete(cacheName);\n    }\n  }\n\n  static async getScoresForSeries(languages, dates) {\n    const apiFilter = {\n      where: {\n        and: [\n          {\n            or: Array.from(languages.keys()).map(languageId => ({languageId: languageId}))\n          },\n          {\n            or: dates.map(date => ({date: date.toISOString()}))\n          }\n        ]\n      },\n      // This makes sure the language details get included. In particular we need the language name for labels\n      include: 'language',\n      // The methods that work with this data will assume that it's ordered by date\n      order: 'date ASC',\n    };\n\n    return await ApiHelper.callApi(apiFilter);\n  }\n}\n\nApiHelper.NUMBER_OF_DATES = 12;\nApiHelper.NUMBER_OF_LANGUAGES = 10;\n\nexport default ApiHelper;\n","import ApiHelper from './ApiHelper';\n\nexport default class TopLanguagesChart {\n  constructor(interval) {\n    this._interval = interval;\n  }\n\n  async getDates() {\n    if (typeof this._dates === 'undefined') {\n      this._dates = await ApiHelper.buildDates(this._interval);\n    }\n    return this._dates;\n  }\n\n  async getSeries() {\n    const languages = await this._getLanguages();\n    const scoresForSeries = await ApiHelper.getScoresForSeries(languages, await this.getDates());\n    let formattedSeriesData = this._formatDataForChart(languages, scoresForSeries);\n\n    return formattedSeriesData;\n  }\n\n  async _getLanguages() {\n    let [lastDate] = (await this.getDates()).slice(-1);\n\n    const filter = {\n      where: {\n        date: lastDate.toISOString(),\n      },\n      // This makes sure the language details get included. In particular we need the language name for labels\n      include: 'language',\n      order: 'points DESC',\n      limit: ApiHelper.NUMBER_OF_LANGUAGES,\n    };\n    let topScores = await ApiHelper.callApi(filter);\n\n    // Use a Map because it is guaranteed to maintain order (unlike a plain object)\n    let topLanguages = new Map();\n    for (let i = 0; i < topScores.length; i++) {\n      topLanguages.set(topScores[i].language.id, topScores[i].language.name);\n    }\n\n    return topLanguages;\n  }\n\n  _formatDataForChart(languages, scores) {\n    let formattedScores = [];\n\n    languages.forEach(languageName => {\n      formattedScores.push(\n        {\n          title: languageName,\n          data: [],\n        }\n      );\n    });\n\n    for (let i = 0; i < scores.length; i++) {\n      const languageName = scores[i].language.name;\n      const points = scores[i].points;\n\n      let languageData = formattedScores.find(languageData => languageData.title === languageName);\n\n      languageData.data.push(\n        {\n          x: languageData.data.length,\n          y: points,\n        }\n      );\n    }\n\n    return formattedScores;\n  }\n}\n","import ApiHelper from './ApiHelper';\n\nexport default class FastestGrowingLanguagesChart {\n  constructor(interval, minimumScore) {\n    this._interval = interval;\n    this._minimumScore = minimumScore;\n  }\n\n  async getDates() {\n    // We need one extra date internally for calculations, so to avoid extra API calls just drop the extra date\n    return (await this._getDatesForCalculations()).slice(1);\n  }\n\n  async _getDatesForCalculations() {\n    if (typeof this._dates === 'undefined') {\n      let dates = await ApiHelper.buildDates(this._interval, ApiHelper.NUMBER_OF_DATES + 1);\n      // From this point on we only need the date as a string\n      this._dates = dates.map(date => date.toISOString());\n    }\n\n    return this._dates;\n  }\n\n  async getSeries() {\n    const datesForCalculations = await this._getDatesForCalculations();\n    const scoresFromApi = await FastestGrowingLanguagesChart._getAllScores(datesForCalculations);\n    const scoresByDate = FastestGrowingLanguagesChart._organizeScoresByDate(scoresFromApi);\n    const percentageChangesByDate = this._getPercentageChangesByDate(scoresByDate, datesForCalculations);\n    const topPercentageChanges = await this._calculateTopPercentageChanges(percentageChangesByDate);\n    const formattedSeriesData = await this._formatDataForChart(topPercentageChanges);\n\n    return formattedSeriesData;\n  }\n\n  static async _getAllScores(dates) {\n    const apiFilter = {\n      where: {\n        or: dates.map(date => ({ date: date }))\n      },\n      // This makes sure the language details get included. In particular we need the language name for labels\n      include: 'language',\n    };\n\n    return await ApiHelper.callApi(apiFilter);\n  }\n\n  // Organize scores by date so we can access each one directly\n  static _organizeScoresByDate(scores) {\n    let scoresByDate = {};\n    for (let i = 0; i < scores.length; i++) {\n      const date = scores[i].date;\n      const languageName = scores[i].language.name;\n      const points = scores[i].points;\n\n      if (!scoresByDate.hasOwnProperty(date)) {\n        scoresByDate[date] = {};\n      }\n      scoresByDate[date][languageName] = points;\n    }\n\n    return scoresByDate;\n  }\n\n  _getPercentageChangesByDate(scoresByDate, datesForCalculations) {\n    let percentageChangesByDate = {};\n\n    // Start from 1 because the previous date is just used for calculating the percentage change\n    for (let i = 1; i < datesForCalculations.length; i++) {\n      let date = datesForCalculations[i];\n      let previousDate = datesForCalculations[i - 1];\n      percentageChangesByDate[date] = {};\n\n      for (let languageName in scoresByDate[date]) {\n        // TODO: Filter by scores where the most recent score is above the minimum??\n        // if (scoresByDate[datesForCalculations[datesForCalculations.length - 1]][languageName] > this._minimumScore) {\n        if (scoresByDate[date][languageName] > this._minimumScore) {\n          let percentageChange = FastestGrowingLanguagesChart._calculatePercentageChange(\n            scoresByDate[previousDate][languageName],\n            scoresByDate[date][languageName]\n          );\n\n          // percentageChange could be NaN or Infinity, but react-vis can only handle numbers or null\n          percentageChange = FastestGrowingLanguagesChart._convertNonFiniteToNull(percentageChange);\n\n          percentageChangesByDate[date][languageName] = percentageChange;\n        }\n      }\n    }\n\n    return percentageChangesByDate;\n  }\n\n  static _calculatePercentageChange(oldValue, newValue) {\n    return newValue / oldValue * 100;\n  }\n\n  static _convertNonFiniteToNull(number) {\n    if (!Number.isFinite(number)) {\n      number = null;\n    }\n    return number;\n  }\n\n  async _calculateTopPercentageChanges(percentageChangesByDate) {\n    const datesForChart = await this.getDates();\n    let topPercentageChanges = {};\n\n    for (let i = 0; i < datesForChart.length; i++) {\n      let date = datesForChart[i];\n      // TODO: make this a map to guarantee order\n      topPercentageChanges[date] = {};\n\n      // Sort percentage changes so we can get the top N and do an ordinal ranking for a bump chart\n      let sortedKeys = Object.keys(percentageChangesByDate[date]).sort(function (a, b) {\n        return (percentageChangesByDate[date][b] - percentageChangesByDate[date][a]);\n      });\n\n      for (let i = 0; i < ApiHelper.NUMBER_OF_LANGUAGES; i++) {\n        let languageName = sortedKeys[i];\n        topPercentageChanges[date][languageName] = percentageChangesByDate[date][languageName];\n      }\n    }\n\n    return topPercentageChanges;\n  }\n\n  async _formatDataForChart(topPercentageChanges) {\n    let formattedScores = [];\n    const allFastestGrowingLanguages = FastestGrowingLanguagesChart._getAllFastestGrowingLanguages(topPercentageChanges);\n\n    for (let languageName of allFastestGrowingLanguages) {\n      formattedScores.push(\n        {\n          title: languageName,\n          data: [],\n        }\n      );\n    }\n\n    let datesForChart = await this.getDates();\n    for (let i = 0; i < datesForChart.length; i++) {\n      let date = datesForChart[i];\n\n      let formattedScoresIndex = 0;\n      for (let languageName of allFastestGrowingLanguages) {\n        let percentageChange = null;\n        let rank = null;\n        if (topPercentageChanges[date].hasOwnProperty(languageName)) {\n          percentageChange = topPercentageChanges[date][languageName];\n          // TODO: this should be a map to guarantee order\n          rank = Object.keys(topPercentageChanges[date]).indexOf(languageName) + 1;\n        }\n\n        formattedScores[formattedScoresIndex].data.push(\n          {\n            x: i,\n            // Use the ordinal number ranking for the chart data in order to create a bump chart\n            y: rank,\n            // TODO: don't add hintTitle and hintValue if rank/percentageChange is null\n            hintTitle: languageName,\n            // Add the actual percentage change as a separate property so it can be used for hints on mouseover\n            hintValue: `${Math.round(percentageChange)}% growth`,\n          }\n        );\n        formattedScoresIndex ++;\n      }\n    }\n\n    return formattedScores;\n  }\n\n  static _getAllFastestGrowingLanguages(topPercentageChanges) {\n    let allFastestGrowingLanguages = [];\n\n    for (let date in topPercentageChanges) {\n      for (let languageName in topPercentageChanges[date]) {\n        if (!allFastestGrowingLanguages.includes(languageName)) {\n          allFastestGrowingLanguages.push(languageName);\n        }\n      }\n    }\n\n    return allFastestGrowingLanguages;\n  }\n}\n","import ApiHelper from './ApiHelper';\nimport TopLanguagesChart from './TopLanguagesChart';\nimport FastestGrowingLanguagesChart from './FastestGrowingLanguagesChart';\n\nclass ChartData {\n  constructor(dates, series, yDomain) {\n    this._dates = dates;\n    this._series = series;\n    this._yDomain = yDomain;\n  }\n\n  static async fromType(chartType, interval) {\n    let chart;\n    let yDomain;\n    switch(chartType) {\n      case ChartData.CHART_TYPES.TOP_LANGUAGES:\n        chart = new TopLanguagesChart(interval);\n        break;\n      case ChartData.CHART_TYPES.FASTEST_OVER_100:\n        chart = new FastestGrowingLanguagesChart(interval, 100);\n        // This reverses the y scale for the bump chart\n        yDomain = [ApiHelper.NUMBER_OF_LANGUAGES, 1];\n        break;\n      case ChartData.CHART_TYPES.FASTEST_OVER_1000:\n        chart = new FastestGrowingLanguagesChart(interval, 1000);\n        yDomain = [ApiHelper.NUMBER_OF_LANGUAGES, 1];\n        break;\n      default:\n        throw new Error(`Unknown chart type: ${chartType}`);\n    }\n\n    let dates = await chart.getDates();\n    let series = await chart.getSeries();\n\n    return new ChartData(dates, series, yDomain);\n  }\n\n  get dates() {\n    return this._dates;\n  }\n\n  get series() {\n    return this._series;\n  }\n\n  get yDomain() {\n    return this._yDomain;\n  }\n}\n\nChartData.CHART_TYPES = {\n  TOP_LANGUAGES: 'toplanguages',\n  FASTEST_OVER_100: 'fastestover100',\n  FASTEST_OVER_1000: 'fastestover1000',\n};\n\nexport default ChartData;\n","function point(that, x, y) {\n  that._context.bezierCurveTo(\n    that._prevX + ((x - that._prevX) * that._compression),\n    that._prevY,\n    x - ((x - that._prevX) * that._compression),\n    y,\n    x,\n    y,\n  );\n}\n\n// I'm not sure if \"compression\" is the proper mathematical term...\n// A compression between 0 (straight lines) and 1 will give the best results\n// The closer you approach 1, the cleaner the lines will look but the more difficult it will be to distinguish between\n// multiple lines\nfunction D3SigmoidCurve(context, compression) {\n  this._context = context;\n  this._compression = compression;\n}\n\nD3SigmoidCurve.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x;\n    y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // proceed\n      default: point(this, x, y); break;\n    }\n    this._prevX = x;\n    this._prevY = y;\n  },\n};\n\nexport default (function custom(compression) {\n  function cardinal(context) {\n    return new D3SigmoidCurve(context, compression);\n  }\n\n  cardinal.compression = function(compression) {\n    return custom(compression);\n  };\n\n  return cardinal;\n})(0.75);\n","import GitHubColors from 'github-colors';\nimport React, { Component } from 'react';\nimport {\n  FlexibleWidthXYPlot,\n  Hint,\n  HorizontalGridLines,\n  LineMarkSeries,\n  VerticalGridLines,\n  XAxis,\n  YAxis\n} from 'react-vis';\nimport { Dimmer, Loader, Image } from 'semantic-ui-react';\n\nimport ApiHelper from '../helpers/ApiHelper';\nimport ChartData from '../helpers/ChartData';\nimport D3SigmoidCurve from '../helpers/D3SigmoidCurve';\n\nimport './Chart.css';\nimport '../../node_modules/react-vis/dist/style.css';\n\nexport default class Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chartData: null,\n      dates: [],\n      hintValue: null,\n      hoveredSeriesIndex: null,\n      yDomain: null,\n    };\n\n    this._onValueMouseOut = this._onValueMouseOut.bind(this);\n    this._onValueMouseOver = this._onValueMouseOver.bind(this);\n    this._xAxisLabelFormatter = this._xAxisLabelFormatter.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.setChartData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (this.props.intervalInMonths !== prevProps.intervalInMonths) {\n      await this.setChartData();\n    }\n  }\n\n  async setChartData() {\n    // const chartData = await ChartData.fromType(ChartData.CHART_TYPES.TOP_LANGUAGES, 12);\n    const chartData = await ChartData.fromType(ChartData.CHART_TYPES.FASTEST_OVER_1000, this.props.intervalInMonths);\n    const leftYAxisLabels = Chart._generateLeftYAxisLabels(chartData.series);\n    const rightYAxisLabels = Chart._generateRightYAxisLabels(chartData.series);\n\n    // TODO: just one object for chart data?\n    this.setState({\n      chartData: chartData.series,\n      dates: chartData.dates,\n      leftYAxisLabels: leftYAxisLabels,\n      rightYAxisLabels: rightYAxisLabels,\n      yDomain: chartData.yDomain,\n    });\n  }\n\n  static _generateLeftYAxisLabels(series) {\n    return series\n      // Get just the data for the first date\n      .map(languageData => languageData.data[0])\n      // Sort in reverse order because the y values are ordinal ranks (1 should be first, not 10)\n      .sort((a, b) => b.y - a.y)\n      // Drop everything else (x value, y value) and return just a list of hint titles\n      .map(languageData => languageData && languageData.hintTitle);\n  }\n\n  // TODO: remove duplication here?\n  static _generateRightYAxisLabels(series) {\n    return series\n      // Get just the data for the last date\n      .map(languageData => languageData.data[languageData.data.length - 1])\n      // Sort in reverse order because the y values are ordinal ranks (1 should be first, not 10)\n      .sort((a, b) => b.y - a.y)\n      // Drop everything else (x value, y value) and return just a list of hint titles\n      .map(languageData => languageData && languageData.hintTitle);\n  }\n\n  _formatHint(value) {\n    return [\n      {\n        title: value.hintTitle,\n        value: value.hintValue,\n      }\n    ];\n  }\n\n  _onValueMouseOut() {\n    this.setState({\n      hintValue: null,\n      hoveredSeriesIndex: null,\n    });\n  }\n\n  // TODO: This doesn't get called for every point (https://github.com/uber/react-vis/issues/1157)\n  _onValueMouseOver(value, index) {\n    this.setState({\n      hintValue: value,\n      hoveredSeriesIndex: index,\n    });\n  }\n\n  // TODO: could we just format the dates ahead of time and get rid of this method?\n  _xAxisLabelFormatter(_value, index) {\n    return Chart._formatDateForLabel(this.state.dates[index]);\n  }\n\n  static _formatDateForLabel(date) {\n    return date.slice(0, 7);\n  }\n\n  static renderLoadingSpinner() {\n    return (\n      <Dimmer.Dimmable blurring dimmed>\n        <Dimmer active inverted>\n          <Loader size='massive' />\n        </Dimmer>\n\n        <Image src='assets/images/chart-placeholder.png' />\n      </Dimmer.Dimmable>\n    );\n  }\n\n  render() {\n    if (!this.state.chartData) {\n      return Chart.renderLoadingSpinner();\n\n    } else {\n      const d3sigmoidcurve = D3SigmoidCurve.compression(0.5);\n      return (\n        <div className=\"chart-container\">\n          <div className=\"chart-content\">\n            <FlexibleWidthXYPlot\n              height={ApiHelper.NUMBER_OF_LANGUAGES * 49}\n              margin={{\n                left: 80,\n                right: 80\n              }}\n              yDomain={this.state.yDomain}\n            >\n              <VerticalGridLines />\n              <HorizontalGridLines />\n              <XAxis tickFormat={this._xAxisLabelFormatter} tickTotal={this.state.dates.length} />\n              <YAxis orientation=\"left\" tickFormat={(v, i) => this.state.leftYAxisLabels[i]} />\n              <YAxis orientation=\"right\" tickFormat={(v, i) => this.state.rightYAxisLabels[i]} />\n              {this.state.chartData.map((entry, i) =>\n                <LineMarkSeries\n                  curve={d3sigmoidcurve}\n                  getNull={(d) => d.y !== null}\n                  key={entry.title}\n                  color={GitHubColors.get(entry.title, true).color}\n                  data={entry.data}\n                  opacity={!this.state.hoveredSeriesIndex || this.state.hoveredSeriesIndex === i ? 1 : 0.5}\n                  onValueMouseOut={this._onValueMouseOut}\n                  onValueMouseOver={(datapoint) => this._onValueMouseOver(datapoint, i)}\n                  strokeWidth={this.state.hoveredSeriesIndex && this.state.hoveredSeriesIndex === i ? 4 : null}\n                />\n              )}\n              {this.state.hintValue &&\n                <Hint\n                  format={this._formatHint}\n                  value={this.state.hintValue}\n                />\n              }\n            </FlexibleWidthXYPlot>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n","import React from 'react';\nimport { Menu } from 'semantic-ui-react';\n\nexport default function ChartBottomMenu(props) {\n  const intervalInMonths = props.intervalInMonths;\n\n  return (\n    <Menu secondary>\n      <Menu.Item name='monthly' value='1' active={intervalInMonths === 1} onClick={props.handleItemClick} />\n      <Menu.Item name='quarterly' value='3' active={intervalInMonths === 3} onClick={props.handleItemClick} />\n      <Menu.Item name='yearly' value='12' active={intervalInMonths === 12} onClick={props.handleItemClick} />\n    </Menu>\n  );\n}\n","import React, { Component } from 'react';\nimport { Menu } from 'semantic-ui-react';\n\nexport default class ChartTopMenu extends Component {\n  state = { activeItem: 'fastest growing' };\n\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n\n  render() {\n    const { activeItem } = this.state;\n\n    return (\n      <Menu secondary>\n        <Menu.Item name='fastest growing' active={activeItem === 'fastest growing'} onClick={this.handleItemClick} />\n        {/* TODO */}\n        {/* <Menu.Item name='top' active={activeItem === 'top'} onClick={this.handleItemClick} /> */}\n      </Menu>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Container, Grid, Item } from 'semantic-ui-react';\n\nimport Chart from './Chart';\nimport ChartBottomMenu from './ChartBottomMenu';\nimport ChartTopMenu from './ChartTopMenu';\n\nimport './ChartGroup.css';\n\nexport default class ChartGroup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      intervalInMonths: 3\n    };\n\n    this.handleIntervalChanged = this.handleIntervalChanged.bind(this);\n  }\n\n  handleIntervalChanged(_event, { value }) {\n    this.setState({ intervalInMonths: Number(value) });\n  }\n\n  render() {\n    return (\n      <Container>\n        <Grid centered padded>\n          <Item.Group className=\"chart-group\">\n            <Item.Content>\n              <Grid centered padded>\n                <ChartTopMenu />\n              </Grid>\n              <Chart\n                intervalInMonths={this.state.intervalInMonths}\n              />\n              <Grid centered padded>\n                <ChartBottomMenu\n                  handleItemClick={this.handleIntervalChanged}\n                  intervalInMonths={this.state.intervalInMonths}\n                />\n              </Grid>\n            </Item.Content>\n          </Item.Group>\n        </Grid>\n      </Container>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Container, Icon, Menu } from 'semantic-ui-react';\n\nexport default class TopMenu extends Component {\n  render() {\n    return (\n      <Menu attached borderless inverted>\n        <Container>\n          <Menu.Item fitted='horizontally' header>\n            Programming language trends\n          </Menu.Item>\n\n          <Menu.Menu position='right'>\n            <Menu.Item href='https://github.com/bmaupin/langtrends' icon>\n              <Icon name='github' size='big' />\n            </Menu.Item>\n          </Menu.Menu>\n        </Container>\n      </Menu>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport ChartGroup from './ChartGroup';\nimport TopMenu from './TopMenu';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TopMenu />\n        <ChartGroup />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}