{"version":3,"sources":["helpers/ApiHelper.js","helpers/LanguagesChart.js","helpers/TopLanguagesChart.js","helpers/FastestGrowingLanguagesChart.js","helpers/MostGrowthLanguages.js","helpers/ChartFactory.js","helpers/D3SigmoidCurve.js","components/Chart.js","components/ChartBottomMenu.js","components/ChartTopMenu.js","components/ChartGroup.js","components/Header.js","components/App.js","registerServiceWorker.js","index.js"],"names":["settings","require","API_TOKEN","process","ApiHelper","intervalInMonths","numberOfDates","dates","_getLatestDateFromApi","currentDate","_getEarliestDateFromApi","earliestDate","i","push","_subtractMonthsUTC","reverse","apiFilter","order","limit","_callApi","scoresFromApi","Date","date","bypassCache","monthsToSubtract","newDate","setUTCMonth","getUTCMonth","filter","apiUrl","encodeURI","concat","JSON","stringify","window","self","fetch","response","_getCache","cache","match","add","json","currentYearMonthString","_getCurrentYearMonthString","caches","has","open","_getLatestYearMonthStringFromApi","latestYearMonthString","_deleteAllCaches","toISOString","slice","keys","cacheName","delete","_buildApiFilter","where","or","map","include","LanguagesChart","interval","Object","classCallCheck","this","_interval","_getDatesForCalculations","_dates","buildDates","datesForCalculations","getAllScores","scoresByDate","_organizeScoresByDate","customScoresByDate","_getCustomScoresByDate","getDates","datesForChart","_calculateTopScores","topCustomScores","_formatDataForChart","formattedSeriesData","length","previousDate","languageName","minimumScore","customScore","_calculateCustomScore","_convertNonFiniteToNull","topScores","formattedScores","allTopLanguages","_getAllTopLanguages","_iterator","Symbol","iterator","_iteratorNormalCompletion","_step","next","done","value","title","data","formattedScoresIndex","_iterator2","_iteratorNormalCompletion2","_step2","score","rank","hasOwnProperty","indexOf","x","y","hintTitle","hintValue","_formatHintValue","areScoresCached","scores","language","name","points","number","Number","isFinite","sortedKeys","sort","a","b","numberOfLanguages","_loop","includes","TopLanguagesChart","_oldValue","newValue","FastestGrowingLanguagesChart","oldValue","Math","round","MostGrowthLanguages","ChartFactory","chartType","CHART_TYPES","FASTEST_GROWTH","MOST_GROWTH","TOP_LANGUAGES","chart","Error","D3SigmoidCurve","context","compression","_context","_compression","prototype","areaStart","_line","areaEnd","NaN","lineStart","_point","lineEnd","closePath","point","lineTo","moveTo","that","bezierCurveTo","_prevX","_prevY","helpers_D3SigmoidCurve","custom","cardinal","Chart","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","chartData","hoveredSeriesIndex","isLoading","showloadingMessage","loadingMessageTimeout","setTimeout","setState","_onValueMouseOut","bind","assertThisInitialized","_onValueMouseOver","_xAxisLabelFormatter","loadChartData","prevProps","fromType","_chart","isSeriesCached","getSeries","series","leftYAxisLabels","_generateLeftYAxisLabels","rightYAxisLabels","_generateRightYAxisLabels","clearTimeout","index","_value","_formatDateForLabel","react_default","createElement","Dimmer","Dimmable","blurring","dimmed","active","inverted","Loader","size","style","fontSize","marginTop","Image","src","_this2","_renderLoadingSpinner","d3sigmoidcurve","className","es","height","margin","left","right","yDomain","tickFormat","tickTotal","orientation","v","entry","curve","getNull","d","key","color","GitHubColors","get","opacity","onValueMouseOut","onValueMouseOver","datapoint","strokeWidth","lineStyle","pointerEvents","format","_formatHint","languageData","Component","ChartBottomMenu","Menu","secondary","Item","onClick","handleItemClick","ChartTopMenu","ChartGroup","handleChartTypeChanged","handleIntervalChanged","_event","_ref","_ref2","Container","Grid","centered","padded","Group","Content","Chart_Chart","Header","attached","borderless","fitted","header","position","Popup","on","trigger","icon","Icon","href","App","Header_Header","ChartGroup_ChartGroup","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","components_App","document","getElementById","URL","origin","addEventListener","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.44107a50.chunk.js","sourcesContent":["const settings = require('../settings.json');\n\nconst API_BASE_URL =\n  process.env.REACT_APP_API_BASE_URL || 'http://localhost:3000';\nconst API_TOKEN = process.env.REACT_APP_API_TOKEN || null;\n\nclass ApiHelper {\n  static async buildDates(\n    intervalInMonths,\n    numberOfDates = settings.numberOfDates\n  ) {\n    let dates = [];\n    let currentDate = await ApiHelper._getLatestDateFromApi();\n    let earliestDate = await ApiHelper._getEarliestDateFromApi();\n\n    for (let i = 0; i < numberOfDates; i++) {\n      if (currentDate <= earliestDate) {\n        break;\n      }\n\n      dates.push(currentDate);\n      currentDate = ApiHelper._subtractMonthsUTC(currentDate, intervalInMonths);\n    }\n\n    return dates.reverse();\n  }\n\n  static async _getEarliestDateFromApi() {\n    const apiFilter = {\n      order: 'date ASC',\n      limit: 1,\n    };\n    let scoresFromApi = await ApiHelper._callApi(apiFilter);\n\n    return new Date(scoresFromApi[0].date);\n  }\n\n  static async _getLatestDateFromApi(bypassCache) {\n    const apiFilter = {\n      order: 'date DESC',\n      limit: 1,\n    };\n    let scoresFromApi = await ApiHelper._callApi(apiFilter, bypassCache);\n\n    return new Date(scoresFromApi[0].date);\n  }\n\n  static _subtractMonthsUTC(date, monthsToSubtract) {\n    let newDate = new Date(date);\n    newDate.setUTCMonth(newDate.getUTCMonth() - monthsToSubtract);\n    return newDate;\n  }\n\n  static async _callApi(filter, bypassCache) {\n    const apiUrl = encodeURI(\n      `${API_BASE_URL}/api/scores?filter=${JSON.stringify(\n        filter\n      )}&access_token=${API_TOKEN}`\n    );\n    let response;\n\n    if (bypassCache || !('caches' in window.self)) {\n      response = await fetch(apiUrl);\n    } else {\n      const cache = await ApiHelper._getCache();\n      response = await cache.match(apiUrl);\n      if (typeof response === 'undefined') {\n        await cache.add(apiUrl);\n        response = await cache.match(apiUrl);\n      }\n    }\n\n    return response.json();\n  }\n\n  static async _getCache() {\n    // If there's a cache matching the current year/month, return it in order to avoid calling the API\n    const currentYearMonthString = ApiHelper._getCurrentYearMonthString();\n    if (await caches.has(currentYearMonthString)) {\n      return await caches.open(currentYearMonthString);\n    }\n\n    // If the latest year/month in the API is current, delete all the old caches before returning the new one\n    const latestYearMonthString = await ApiHelper._getLatestYearMonthStringFromApi();\n    if (latestYearMonthString === currentYearMonthString) {\n      await ApiHelper._deleteAllCaches();\n    }\n\n    // Return a cache for the latest year/month in the API (whether the current month or a previous one)\n    return await caches.open(latestYearMonthString);\n  }\n\n  static _getCurrentYearMonthString() {\n    return new Date().toISOString().slice(0, 7);\n  }\n\n  static async _getLatestYearMonthStringFromApi() {\n    return (await ApiHelper._getLatestDateFromApi(true))\n      .toISOString()\n      .slice(0, 7);\n  }\n\n  static async _deleteAllCaches() {\n    for (let cacheName of await caches.keys()) {\n      await caches.delete(cacheName);\n    }\n  }\n\n  static async getAllScores(dates) {\n    const apiFilter = ApiHelper._buildApiFilter(dates);\n    return await ApiHelper._callApi(apiFilter);\n  }\n\n  static _buildApiFilter(dates) {\n    return {\n      where: {\n        or: dates.map(date => ({ date: date })),\n      },\n      // This makes sure the language details get included. In particular we need the language name for labels\n      include: 'language',\n    };\n  }\n\n  static async areScoresCached(dates) {\n    const apiFilter = ApiHelper._buildApiFilter(dates);\n    const apiUrl = encodeURI(\n      `${API_BASE_URL}/api/scores?filter=${JSON.stringify(\n        apiFilter\n      )}&access_token=${API_TOKEN}`\n    );\n    const currentYearMonthString = ApiHelper._getCurrentYearMonthString();\n\n    if (await caches.has(currentYearMonthString)) {\n      const cache = await caches.open(currentYearMonthString);\n      // cache.match will return undefined if the URL isn't cached\n      return typeof (await cache.match(apiUrl)) !== 'undefined';\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default ApiHelper;\n","import ApiHelper from './ApiHelper';\nimport settings from '../settings.json';\n\nexport default class LanguagesChart {\n  constructor(interval) {\n    this._interval = interval;\n  }\n\n  async getDates() {\n    // We need one extra date internally for calculations, so to avoid extra API calls just drop the extra date\n    return (await this._getDatesForCalculations()).slice(1);\n  }\n\n  async _getDatesForCalculations() {\n    if (typeof this._dates === 'undefined') {\n      let dates = await ApiHelper.buildDates(this._interval, settings.numberOfDates + 1);\n      // From this point on we only need the date as a string\n      this._dates = dates.map(date => date.toISOString());\n    }\n\n    return this._dates;\n  }\n\n  async getSeries() {\n    const datesForCalculations = await this._getDatesForCalculations();\n    const scoresFromApi = await ApiHelper.getAllScores(datesForCalculations);\n    const scoresByDate = LanguagesChart._organizeScoresByDate(scoresFromApi);\n    const customScoresByDate = this._getCustomScoresByDate(scoresByDate, datesForCalculations);\n    const datesForChart = await this.getDates();\n    const topCustomScores = await LanguagesChart._calculateTopScores(customScoresByDate, datesForChart);\n    const formattedSeriesData = await this._formatDataForChart(topCustomScores, datesForChart);\n\n    return formattedSeriesData;\n  }\n\n  // Organize scores by date so we can access each one directly\n  static _organizeScoresByDate(scores) {\n    let scoresByDate = {};\n    for (let i = 0; i < scores.length; i++) {\n      const date = scores[i].date;\n      const languageName = scores[i].language.name;\n      const points = scores[i].points;\n\n      if (!scoresByDate.hasOwnProperty(date)) {\n        scoresByDate[date] = {};\n      }\n      scoresByDate[date][languageName] = points;\n    }\n\n    return scoresByDate;\n  }\n\n  // Convert raw scores into custom scores (percentage change, score difference, etc)\n  _getCustomScoresByDate(scoresByDate, datesForCalculations) {\n    let customScoresByDate = {};\n\n    // Start from 1 because the previous date is just used for calculating the custom score\n    for (let i = 1; i < datesForCalculations.length; i++) {\n      let date = datesForCalculations[i];\n      let previousDate = datesForCalculations[i - 1];\n      customScoresByDate[date] = {};\n\n      for (let languageName in scoresByDate[date]) {\n        // TODO: Filter by scores where the most recent score is above the minimum??\n        // if (scoresByDate[datesForCalculations[datesForCalculations.length - 1]][languageName] > settings.minimumScore) {\n        if (scoresByDate[date][languageName] > settings.minimumScore) {\n          let customScore = this._calculateCustomScore(\n            scoresByDate[previousDate][languageName],\n            scoresByDate[date][languageName]\n          );\n\n          // percentage change could be NaN or Infinity, but react-vis can only handle numbers or null\n          customScore = LanguagesChart._convertNonFiniteToNull(customScore);\n\n          customScoresByDate[date][languageName] = customScore;\n        }\n      }\n    }\n\n    return customScoresByDate;\n  }\n\n  static _convertNonFiniteToNull(number) {\n    if (!Number.isFinite(number)) {\n      number = null;\n    }\n    return number;\n  }\n\n  static async _calculateTopScores(scoresByDate, dates) {\n    let topScores = {};\n\n    for (let i = 0; i < dates.length; i++) {\n      let date = dates[i];\n      // TODO: make this a map to guarantee order\n      topScores[date] = {};\n\n      // Sort scores so we can get the top N and do an ordinal ranking for a bump chart\n      let sortedKeys = Object.keys(scoresByDate[date]).sort(function (a, b) {\n        return (scoresByDate[date][b] - scoresByDate[date][a]);\n      });\n\n      for (let i = 0; i < settings.numberOfLanguages; i++) {\n        let languageName = sortedKeys[i];\n        topScores[date][languageName] = scoresByDate[date][languageName];\n      }\n    }\n\n    return topScores;\n  }\n\n  async _formatDataForChart(topScores, dates) {\n    let formattedScores = [];\n    const allTopLanguages = LanguagesChart._getAllTopLanguages(topScores);\n\n    for (let languageName of allTopLanguages) {\n      formattedScores.push(\n        {\n          title: languageName,\n          data: [],\n        }\n      );\n    }\n\n    for (let i = 0; i < dates.length; i++) {\n      let date = dates[i];\n\n      let formattedScoresIndex = 0;\n      for (let languageName of allTopLanguages) {\n        let score = null;\n        let rank = null;\n        if (topScores[date].hasOwnProperty(languageName)) {\n          score = topScores[date][languageName];\n          // TODO: this should be a map to guarantee order\n          rank = Object.keys(topScores[date]).indexOf(languageName) + 1;\n        }\n\n        formattedScores[formattedScoresIndex].data.push(\n          {\n            x: i,\n            // Use the ordinal number ranking for the chart data in order to create a bump chart\n            y: rank,\n            // TODO: don't add hintTitle and hintValue if score is null\n            hintTitle: languageName,\n            // Add the custom score as a separate property so it can be used for hints on mouseover\n            hintValue: this._formatHintValue(score),\n          }\n        );\n        formattedScoresIndex ++;\n      }\n    }\n\n    return formattedScores;\n  }\n\n  static _getAllTopLanguages(topScores) {\n    let allTopLanguages = [];\n\n    for (let date in topScores) {\n      for (let languageName in topScores[date]) {\n        if (!allTopLanguages.includes(languageName)) {\n          allTopLanguages.push(languageName);\n        }\n      }\n    }\n\n    return allTopLanguages;\n  }\n\n  async isSeriesCached() {\n    const datesForCalculations = await this._getDatesForCalculations();\n    return await ApiHelper.areScoresCached(datesForCalculations);\n  }\n}\n","import LanguagesChart from './LanguagesChart';\n\nexport default class TopLanguagesChart extends LanguagesChart {\n  _calculateCustomScore(_oldValue, newValue) {\n    return newValue;\n  }\n\n  _formatHintValue(hintValue) {\n    return hintValue;\n  }\n}\n","import LanguagesChart from './LanguagesChart';\n\nexport default class FastestGrowingLanguagesChart extends LanguagesChart {\n  _calculateCustomScore(oldValue, newValue) {\n    return newValue / oldValue * 100;\n  }\n\n  _formatHintValue(hintValue) {\n    return `${Math.round(hintValue)}% growth`;\n  }\n}\n","import LanguagesChart from './LanguagesChart';\n\nexport default class MostGrowthLanguages extends LanguagesChart {\n  _calculateCustomScore(oldValue, newValue) {\n    return newValue - oldValue;\n  }\n\n  _formatHintValue(hintValue) {\n    return `+${hintValue}`;\n  }\n}\n","import TopLanguagesChart from './TopLanguagesChart';\nimport FastestGrowingLanguagesChart from './FastestGrowingLanguagesChart';\nimport MostGrowthLanguages from './MostGrowthLanguages';\n\nclass ChartFactory {\n  static async fromType(chartType, interval) {\n    let chart;\n    switch(chartType) {\n      case ChartFactory.CHART_TYPES.FASTEST_GROWTH:\n        chart = new FastestGrowingLanguagesChart(interval);\n        break;\n      case ChartFactory.CHART_TYPES.MOST_GROWTH:\n        chart = new MostGrowthLanguages(interval);\n        break;\n      case ChartFactory.CHART_TYPES.TOP_LANGUAGES:\n        chart = new TopLanguagesChart(interval);\n        break;\n      default:\n        throw new Error(`Unknown chart type: ${chartType}`);\n    }\n\n    return chart;\n  }\n}\n\nChartFactory.CHART_TYPES = {\n  FASTEST_GROWTH: 'fastestgrowth',\n  MOST_GROWTH: 'mostgrowth',\n  TOP_LANGUAGES: 'toplanguages',\n};\n\nexport default ChartFactory;\n","function point(that, x, y) {\n  that._context.bezierCurveTo(\n    that._prevX + ((x - that._prevX) * that._compression),\n    that._prevY,\n    x - ((x - that._prevX) * that._compression),\n    y,\n    x,\n    y,\n  );\n}\n\n// I'm not sure if \"compression\" is the proper mathematical term...\n// A compression between 0 (straight lines) and 1 will give the best results\n// The closer you approach 1, the cleaner the lines will look but the more difficult it will be to distinguish between\n// multiple lines\nfunction D3SigmoidCurve(context, compression) {\n  this._context = context;\n  this._compression = compression;\n}\n\nD3SigmoidCurve.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x;\n    y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // proceed\n      default: point(this, x, y); break;\n    }\n    this._prevX = x;\n    this._prevY = y;\n  },\n};\n\nexport default (function custom(compression) {\n  function cardinal(context) {\n    return new D3SigmoidCurve(context, compression);\n  }\n\n  cardinal.compression = function(compression) {\n    return custom(compression);\n  };\n\n  return cardinal;\n})(0.75);\n","import GitHubColors from 'github-colors';\nimport React, { Component } from 'react';\nimport {\n  FlexibleWidthXYPlot,\n  Hint,\n  HorizontalGridLines,\n  LineMarkSeries,\n  VerticalGridLines,\n  XAxis,\n  YAxis,\n} from 'react-vis';\nimport { Dimmer, Loader, Image } from 'semantic-ui-react';\n\nimport ChartFactory from '../helpers/ChartFactory';\nimport D3SigmoidCurve from '../helpers/D3SigmoidCurve';\nimport settings from '../settings.json';\n\nimport './Chart.css';\nimport '../../node_modules/react-vis/dist/style.css';\n\nexport default class Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chartData: null,\n      dates: [],\n      hintValue: null,\n      hoveredSeriesIndex: null,\n      isLoading: true,\n      showloadingMessage: false,\n    };\n\n    // Don't show the loading message right away because it can create a lot of visual noise if the loading spinner\n    // only briefly flashes\n    this.loadingMessageTimeout = setTimeout(\n      () => {\n        this.setState({ showloadingMessage: true });\n      },\n      // This should be just long enough so it only shows when the API isn't ready but doesn't show in any other\n      // situations, such as when changing chart types when the data isn't cached yet\n      4000\n    );\n\n    this._onValueMouseOut = this._onValueMouseOut.bind(this);\n    this._onValueMouseOver = this._onValueMouseOver.bind(this);\n    this._xAxisLabelFormatter = this._xAxisLabelFormatter.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.loadChartData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    // These conditionals prevent some extra flashing and wonkiness caused by reloading the chart data too aggressively\n    if (\n      this.props.chartType !== prevProps.chartType ||\n      this.props.intervalInMonths !== prevProps.intervalInMonths\n    ) {\n      await this.loadChartData();\n    }\n  }\n\n  async loadChartData() {\n    this._chart = await ChartFactory.fromType(\n      this.props.chartType,\n      this.props.intervalInMonths\n    );\n\n    const isSeriesCached = await this._chart.isSeriesCached();\n    // Use to show the loading spinner if the data isn't cached so the user has some feedback that it's being loaded,\n    // but if the data is cached we don't want to show the loading spinner because it causes an annoying flash\n    this.setState({\n      isLoading: !isSeriesCached,\n    });\n\n    const dates = await this._chart.getDates();\n    const series = await this._chart.getSeries();\n\n    const leftYAxisLabels = Chart._generateLeftYAxisLabels(series);\n    const rightYAxisLabels = Chart._generateRightYAxisLabels(series);\n\n    // Prevent the loading message from showing after the data is loaded\n    clearTimeout(this.loadingMessageTimeout);\n\n    // TODO: just one object for chart data?\n    this.setState({\n      chartData: series,\n      dates: dates,\n      isLoading: false,\n      leftYAxisLabels: leftYAxisLabels,\n      rightYAxisLabels: rightYAxisLabels,\n      showloadingMessage: false,\n    });\n  }\n\n  static _generateLeftYAxisLabels(series) {\n    return (\n      series\n        // Get just the data for the first date\n        .map(languageData => languageData.data[0])\n        // Sort in reverse order because the y values are ordinal ranks (1 should be first, not 10)\n        .sort((a, b) => b.y - a.y)\n        // Drop everything else (x value, y value) and return just a list of hint titles\n        .map(languageData => languageData && languageData.hintTitle)\n    );\n  }\n\n  // TODO: remove duplication here?\n  static _generateRightYAxisLabels(series) {\n    return (\n      series\n        // Get just the data for the last date\n        .map(languageData => languageData.data[languageData.data.length - 1])\n        // Sort in reverse order because the y values are ordinal ranks (1 should be first, not 10)\n        .sort((a, b) => b.y - a.y)\n        // Drop everything else (x value, y value) and return just a list of hint titles\n        .map(languageData => languageData && languageData.hintTitle)\n    );\n  }\n\n  _formatHint(value) {\n    return [\n      {\n        title: value.hintTitle,\n        value: value.hintValue,\n      },\n    ];\n  }\n\n  _onValueMouseOut() {\n    this.setState({\n      hintValue: null,\n      hoveredSeriesIndex: null,\n    });\n  }\n\n  _onValueMouseOver(value, index) {\n    this.setState({\n      hintValue: value,\n      hoveredSeriesIndex: index,\n    });\n  }\n\n  // TODO: could we just format the dates ahead of time and get rid of this method?\n  _xAxisLabelFormatter(_value, index) {\n    return Chart._formatDateForLabel(this.state.dates[index]);\n  }\n\n  static _formatDateForLabel(date) {\n    return date.slice(0, 7);\n  }\n\n  _renderLoadingSpinner() {\n    return (\n      <Dimmer.Dimmable blurring dimmed>\n        <Dimmer active inverted>\n          <Loader size=\"massive\">\n            {this.state.showloadingMessage && (\n              <span>\n                Please wait\n                <div style={{ fontSize: '0.6em', marginTop: '0.5em' }}>\n                  (The backend may take up to 30 seconds to start)\n                </div>\n              </span>\n            )}\n          </Loader>\n        </Dimmer>\n\n        <Image src=\"assets/images/chart-placeholder.png\" />\n      </Dimmer.Dimmable>\n    );\n  }\n\n  render() {\n    if (this.state.isLoading || !this.state.chartData) {\n      return this._renderLoadingSpinner();\n    } else {\n      const d3sigmoidcurve = D3SigmoidCurve.compression(0.5);\n      return (\n        <div className=\"chart-container\">\n          <div className=\"chart-content\">\n            <FlexibleWidthXYPlot\n              height={settings.numberOfLanguages * 49}\n              margin={{\n                left: 80,\n                right: 80,\n              }}\n              // Reverse the y scale since we're doing a bump chart\n              yDomain={[settings.numberOfLanguages, 1]}\n            >\n              <VerticalGridLines />\n              <HorizontalGridLines />\n              <XAxis\n                tickFormat={this._xAxisLabelFormatter}\n                tickTotal={this.state.dates.length}\n              />\n              <YAxis\n                orientation=\"left\"\n                tickFormat={(v, i) => this.state.leftYAxisLabels[i]}\n              />\n              <YAxis\n                orientation=\"right\"\n                tickFormat={(v, i) => this.state.rightYAxisLabels[i]}\n              />\n              {this.state.chartData.map((entry, i) => (\n                <LineMarkSeries\n                  curve={d3sigmoidcurve}\n                  getNull={d => d.y !== null}\n                  key={entry.title}\n                  color={GitHubColors.get(entry.title, true).color}\n                  data={entry.data}\n                  opacity={\n                    this.state.hoveredSeriesIndex === null ||\n                    this.state.hoveredSeriesIndex === i\n                      ? 1\n                      : 0.5\n                  }\n                  onValueMouseOut={this._onValueMouseOut}\n                  onValueMouseOver={datapoint =>\n                    this._onValueMouseOver(datapoint, i)\n                  }\n                  strokeWidth={\n                    this.state.hoveredSeriesIndex !== null &&\n                    this.state.hoveredSeriesIndex === i\n                      ? 4\n                      : null\n                  }\n                  lineStyle={{ pointerEvents: 'none' }}\n                />\n              ))}\n              {this.state.hintValue && (\n                <Hint format={this._formatHint} value={this.state.hintValue} />\n              )}\n            </FlexibleWidthXYPlot>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n","import React from 'react';\nimport { Menu } from 'semantic-ui-react';\n\nexport default function ChartBottomMenu(props) {\n  const intervalInMonths = props.intervalInMonths;\n\n  return (\n    <Menu secondary>\n      <Menu.Item name='monthly' value='1' active={intervalInMonths === 1} onClick={props.handleItemClick} />\n      <Menu.Item name='quarterly' value='3' active={intervalInMonths === 3} onClick={props.handleItemClick} />\n      <Menu.Item name='yearly' value='12' active={intervalInMonths === 12} onClick={props.handleItemClick} />\n    </Menu>\n  );\n}\n","import React from 'react';\nimport { Menu } from 'semantic-ui-react';\n\nimport ChartFactory from '../helpers/ChartFactory';\n\nexport default function ChartTopMenu(props) {\n  const chartType = props.chartType;\n\n  return (\n    <Menu secondary>\n      <Menu.Item\n        name={ChartFactory.CHART_TYPES.FASTEST_GROWTH}\n        active={chartType === ChartFactory.CHART_TYPES.FASTEST_GROWTH}\n        onClick={props.handleItemClick}\n      >Fastest growth</Menu.Item>\n      <Menu.Item\n        name={ChartFactory.CHART_TYPES.MOST_GROWTH}\n        active={chartType === ChartFactory.CHART_TYPES.MOST_GROWTH}\n        onClick={props.handleItemClick}\n      >Most growth</Menu.Item>\n      <Menu.Item\n        name={ChartFactory.CHART_TYPES.TOP_LANGUAGES}\n        active={chartType === ChartFactory.CHART_TYPES.TOP_LANGUAGES}\n        onClick={props.handleItemClick}\n      >Top</Menu.Item>\n    </Menu>\n  );\n}\n","import React, { Component } from 'react';\nimport { Container, Grid, Item } from 'semantic-ui-react';\n\nimport Chart from './Chart';\nimport ChartBottomMenu from './ChartBottomMenu';\nimport ChartFactory from '../helpers/ChartFactory';\nimport ChartTopMenu from './ChartTopMenu';\n\nimport './ChartGroup.css';\n\nexport default class ChartGroup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chartType: ChartFactory.CHART_TYPES.MOST_GROWTH,\n      intervalInMonths: 3,\n    };\n\n    this.handleChartTypeChanged = this.handleChartTypeChanged.bind(this);\n    this.handleIntervalChanged = this.handleIntervalChanged.bind(this);\n  }\n\n  handleChartTypeChanged(_event, { name }) {\n    this.setState({ chartType: name });\n  }\n\n  handleIntervalChanged(_event, { value }) {\n    this.setState({ intervalInMonths: Number(value) });\n  }\n\n  render() {\n    return (\n      <Container>\n        <Grid centered padded>\n          <Item.Group className=\"chart-group\">\n            <Item.Content>\n              <Grid centered padded>\n                <ChartTopMenu\n                  chartType={this.state.chartType}\n                  handleItemClick={this.handleChartTypeChanged}\n                />\n              </Grid>\n              <Chart\n                chartType={this.state.chartType}\n                intervalInMonths={this.state.intervalInMonths}\n              />\n              <Grid centered padded>\n                <ChartBottomMenu\n                  handleItemClick={this.handleIntervalChanged}\n                  intervalInMonths={this.state.intervalInMonths}\n                />\n              </Grid>\n            </Item.Content>\n          </Item.Group>\n        </Grid>\n      </Container>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Container, Icon, Menu, Popup } from 'semantic-ui-react';\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <Menu attached borderless inverted>\n        <Container>\n          <Menu.Item fitted=\"horizontally\" header>\n            Programming language trends\n          </Menu.Item>\n\n          <Menu.Menu position=\"right\">\n            <Popup\n              on=\"click\"\n              trigger={\n                <Menu.Item icon>\n                  <Icon name=\"help circle\" size=\"big\" />\n                </Menu.Item>\n              }\n            >\n              <Popup.Content>\n                <h3>How the data is calculated</h3>\n                <p>\n                  First, a base numerical value for a given language and date is\n                  calculated by adding the total number of GitHub repositories\n                  to the total number of Stack Overflow tags for that language\n                  up to that day.\n                </p>\n                <h4>Fastest growth</h4>\n                <p>\n                  Languages with the highest percentage change compared to the\n                  previous date. Note that scores under a certain threshold (\n                  <a href=\"https://github.com/bmaupin/langtrends/blob/master/src/settings.json#L2\">\n                    currently 1000\n                  </a>\n                  ) are filtered out to reduce{' '}\n                  <a href=\"https://xkcd.com/1102/\">dubiousness</a>.\n                </p>\n                <h4>Most growh</h4>\n                <p>\n                  Languages with the highest numerical change compared to the\n                  previous date.\n                </p>\n                <h4>Top</h4>\n                <p>\n                  Languages with the total highest value for a particular given\n                  date.\n                </p>\n              </Popup.Content>\n            </Popup>\n            <Menu.Item href=\"https://github.com/bmaupin/langtrends\" icon>\n              <Icon name=\"github\" size=\"big\" />\n            </Menu.Item>\n          </Menu.Menu>\n        </Container>\n      </Menu>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport ChartGroup from './ChartGroup';\nimport Header from './Header';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <ChartGroup />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}