{"version":3,"sources":["helpers/ChartFactory.ts","helpers/ApiHelper.ts","helpers/LanguagesChart.ts","helpers/TopLanguagesChart.ts","helpers/FastestGrowingLanguagesChart.ts","helpers/MostGrowthLanguages.ts","helpers/D3SigmoidCurve.js","components/Chart.tsx","components/ChartBottomMenu.tsx","components/ChartTopMenu.tsx","components/ChartGroup.tsx","components/Header.tsx","components/App.tsx","index.tsx"],"names":["ChartType","settings","require","API_BASE_URL","process","ApiHelper","intervalInMonths","numberOfDates","dates","getLatestDateFromApi","currentDate","getEarliestDateFromApi","earliestDate","i","push","subtractMonthsUTC","reverse","map","date","toISOString","slice","getScoresFromApi","scores","latestDate","score","Date","apiUrl","encodeURI","fetch","response","json","allScores","filter","includes","monthsToSubtract","newDate","setUTCMonth","getUTCMonth","this","getScoresWithLanguages","getLanguagesFromApi","languages","language","find","id","languageId","LanguagesChart","interval","getDatesForCalculations","buildDates","datesForCalculations","getScores","scoresFromApi","scoresByDate","organizeScoresByDate","customScoresByDate","getCustomScoresByDate","getDates","datesForChart","calculateTopScores","topCustomScores","formatDataForChart","formattedSeriesData","length","previousDate","languageName","minimumScore","customScore","calculateCustomScore","convertNonFiniteNumber","topScores","formattedScores","allTopLanguages","getAllTopLanguages","title","data","formattedScoresIndex","rank","hasOwnProperty","Object","keys","indexOf","x","y","hintTitle","hintValue","formatHintValue","name","points","number","Number","isFinite","sortedKeys","sort","a","b","numberOfLanguages","TopLanguagesChart","_oldValue","newValue","String","FastestGrowingLanguagesChart","oldValue","Math","round","MostGrowthLanguages","ChartFactory","chartType","FastestGrowth","MostGrowth","TopLanguages","chart","Error","D3SigmoidCurve","context","compression","_context","_compression","prototype","areaStart","_line","areaEnd","NaN","lineStart","_point","lineEnd","closePath","point","lineTo","moveTo","that","bezierCurveTo","_prevX","_prevY","custom","cardinal","Chart","props","useState","chartData","setChartData","setDates","setHintValue","hoveredSeriesIndex","setHoveredSeriesIndex","leftYAxisLabels","setLeftYAxisLabels","rightYAxisLabels","setRightYAxisLabels","useEffect","loadChartData","fromType","getSeries","series","generateLeftYAxisLabels","generateRightYAxisLabels","languageData","onValueMouseOut","formatDateForLabel","d3sigmoidcurve","className","height","margin","left","right","yDomain","tickFormat","_value","index","tickTotal","orientation","_v","entry","curve","getNull","d","color","GitHubColors","get","opacity","onValueMouseOver","datapoint","strokeWidth","undefined","lineStyle","pointerEvents","format","value","ChartBottomMenu","Menu","secondary","Item","active","onClick","handleItemClick","ChartTopMenu","ChartGroup","setChartType","setIntervalInMonths","Container","Grid","centered","padded","Group","Content","_event","Header","attached","borderless","inverted","fitted","header","position","Popup","on","trigger","icon","Icon","size","href","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5cff6ebc.chunk.js","sourcesContent":["import TopLanguagesChart from './TopLanguagesChart';\nimport FastestGrowingLanguagesChart from './FastestGrowingLanguagesChart';\nimport MostGrowthLanguages from './MostGrowthLanguages';\n\nexport enum ChartType {\n  FastestGrowth = 'FASTEST_GROWTH',\n  MostGrowth = 'MOST_GROWTH',\n  TopLanguages = 'TOP_LANGUAGES',\n}\n\nexport default class ChartFactory {\n  static async fromType(chartType: string, interval: number) {\n    let chart;\n    switch (chartType) {\n      case ChartType.FastestGrowth:\n        chart = new FastestGrowingLanguagesChart(interval);\n        break;\n      case ChartType.MostGrowth:\n        chart = new MostGrowthLanguages(interval);\n        break;\n      case ChartType.TopLanguages:\n        chart = new TopLanguagesChart(interval);\n        break;\n      default:\n        throw new Error(`Unknown chart type: ${chartType}`);\n    }\n\n    return chart;\n  }\n}\n","const settings = require('../settings.json');\n\nconst API_BASE_URL =\n  process.env.REACT_APP_API_BASE_URL || 'http://localhost:3000';\n\nexport interface Language {\n  id: number;\n  name: string;\n  stackoverflowTag?: string;\n}\n\nexport interface Score {\n  date: string;\n  language?: Language;\n  languageId: number;\n  points: number;\n}\n\nexport default class ApiHelper {\n  public static async buildDates(\n    intervalInMonths: number,\n    numberOfDates = settings.numberOfDates\n  ): Promise<string[]> {\n    const dates = [];\n    let currentDate = await ApiHelper.getLatestDateFromApi();\n    const earliestDate = await ApiHelper.getEarliestDateFromApi();\n\n    for (let i = 0; i < numberOfDates; i++) {\n      if (currentDate < earliestDate) {\n        break;\n      }\n\n      dates.push(currentDate);\n      currentDate = ApiHelper.subtractMonthsUTC(currentDate, intervalInMonths);\n    }\n\n    dates.reverse();\n\n    // We only need the date as a string; use the same format as the JSON data\n    return dates.map((date) => date.toISOString().slice(0, 10));\n  }\n\n  private static async getLatestDateFromApi(): Promise<Date> {\n    const scores = await ApiHelper.getScoresFromApi();\n    let latestDate = '';\n\n    // Scores are not guaranteed to be in order by date\n    for (const score of scores) {\n      // Comparing date strings like this actually works 😁\n      if (score.date > latestDate) {\n        latestDate = score.date;\n      }\n    }\n\n    return new Date(latestDate);\n  }\n\n  // It might seem ineffecient to call the API every time we need to get the scores,\n  // but so far the browser caching seems to handle it just fine. We can always add\n  // some kind of caching (e.g. react-query) later if needed.\n  private static async getScoresFromApi(dates?: string[]): Promise<Score[]> {\n    const apiUrl = encodeURI(`${API_BASE_URL}/scores.json`);\n\n    const response = await fetch(apiUrl);\n    const allScores = (await response.json()) as Score[];\n\n    if (dates) {\n      return allScores.filter((score) => dates.includes(score.date));\n    }\n\n    return allScores;\n  }\n\n  private static async getEarliestDateFromApi(): Promise<Date> {\n    const scores = await ApiHelper.getScoresFromApi();\n    let earliestDate = '';\n\n    for (const score of scores) {\n      if (score.date < earliestDate) {\n        earliestDate = score.date;\n      }\n    }\n\n    return new Date(earliestDate);\n  }\n\n  private static subtractMonthsUTC(date: Date, monthsToSubtract: number): Date {\n    // Make a copy of the date object so we don't overwrite it\n    const newDate = new Date(date);\n    newDate.setUTCMonth(newDate.getUTCMonth() - monthsToSubtract);\n    return newDate;\n  }\n\n  public static async getScores(dates: string[]): Promise<Score[]> {\n    return await this.getScoresWithLanguages(dates);\n  }\n\n  private static async getScoresWithLanguages(\n    dates: string[]\n  ): Promise<Score[]> {\n    const languages = await this.getLanguagesFromApi();\n    const scores = await this.getScoresFromApi(dates);\n    for (const score of scores) {\n      score.language = languages.find(\n        (language) => language.id === score.languageId\n      );\n    }\n\n    return scores;\n  }\n\n  private static async getLanguagesFromApi(): Promise<Language[]> {\n    const apiUrl = encodeURI(`${API_BASE_URL}/languages.json`);\n\n    const response = await fetch(apiUrl);\n    return response.json();\n  }\n}\n","import ApiHelper, { Score } from './ApiHelper';\nimport settings from '../settings.json';\nimport { LineMarkSeriesPoint } from 'react-vis';\n\nexport interface SeriesPointWithHint extends LineMarkSeriesPoint {\n  hintTitle: string;\n  hintValue: string;\n  // LineMarkSeriesPoint also allows these to be string or Date but we're not using those and so\n  // overriding them allows us to adhere to LineMarkSeriesPoint without having to check for those\n  // unused types everywhere\n  x: number;\n  y: number;\n}\n\nexport interface SeriesData {\n  data: SeriesPointWithHint[];\n  title: string;\n}\n\ninterface ScoresByDate {\n  [key: string]: {\n    [key: string]: number;\n  };\n}\n\nexport default abstract class LanguagesChart {\n  private dates: string[] | undefined;\n  private interval: number;\n\n  constructor(interval: number) {\n    this.interval = interval;\n  }\n\n  protected abstract calculateCustomScore(\n    oldValue: number,\n    newValue: number\n  ): number;\n\n  protected abstract formatHintValue(hintValue: number): string;\n\n  public async getDates() {\n    // We need one extra date internally for calculations, so to avoid extra API calls just drop the extra date\n    return (await this.getDatesForCalculations()).slice(1);\n  }\n\n  private async getDatesForCalculations() {\n    if (!this.dates) {\n      this.dates = await ApiHelper.buildDates(\n        this.interval,\n        settings.numberOfDates + 1\n      );\n    }\n\n    return this.dates;\n  }\n\n  public async getSeries(): Promise<SeriesData[]> {\n    const datesForCalculations = await this.getDatesForCalculations();\n    const scoresFromApi = await ApiHelper.getScores(datesForCalculations);\n    const scoresByDate = LanguagesChart.organizeScoresByDate(scoresFromApi);\n    const customScoresByDate = this.getCustomScoresByDate(\n      scoresByDate,\n      datesForCalculations\n    );\n    const datesForChart = await this.getDates();\n    const topCustomScores = await LanguagesChart.calculateTopScores(\n      customScoresByDate,\n      datesForChart\n    );\n    const formattedSeriesData = await this.formatDataForChart(\n      topCustomScores,\n      datesForChart\n    );\n\n    return formattedSeriesData;\n  }\n\n  // Organize scores by date so we can access each one directly\n  private static organizeScoresByDate(scores: Score[]): ScoresByDate {\n    const scoresByDate = {} as ScoresByDate;\n    for (let i = 0; i < scores.length; i++) {\n      const date = scores[i].date;\n      const languageName = scores[i].language!.name;\n      const points = scores[i].points;\n\n      if (!scoresByDate.hasOwnProperty(date)) {\n        scoresByDate[date] = {};\n      }\n      scoresByDate[date][languageName] = points;\n    }\n\n    return scoresByDate;\n  }\n\n  // Convert raw scores into custom scores (percentage change, score difference, etc)\n  private getCustomScoresByDate(\n    scoresByDate: ScoresByDate,\n    datesForCalculations: string[]\n  ): ScoresByDate {\n    const customScoresByDate = {} as ScoresByDate;\n\n    // Start from 1 because the previous date is just used for calculating the custom score\n    for (let i = 1; i < datesForCalculations.length; i++) {\n      const date = datesForCalculations[i];\n      const previousDate = datesForCalculations[i - 1];\n      customScoresByDate[date] = {};\n\n      for (const languageName in scoresByDate[date]) {\n        // TODO: Filter by scores where the most recent score is above the minimum??\n        // if (scoresByDate[datesForCalculations[datesForCalculations.length - 1]][languageName] > settings.minimumScore) {\n        if (scoresByDate[date][languageName]! > settings.minimumScore) {\n          let customScore = this.calculateCustomScore(\n            scoresByDate[previousDate][languageName]!,\n            scoresByDate[date][languageName]!\n          );\n\n          customScore = LanguagesChart.convertNonFiniteNumber(customScore);\n\n          customScoresByDate[date][languageName] = customScore;\n        }\n      }\n    }\n\n    return customScoresByDate;\n  }\n\n  // I think this is a rare occurrence, but percentage change (for FastestGrowingLanguagesChart)\n  // could be NaN or Infinity (e.g. if a previous month's value was 0). react-vis can only handle\n  // numbers or null\n  private static convertNonFiniteNumber(number: number): number {\n    if (!Number.isFinite(number)) {\n      return 0;\n    }\n    return number;\n  }\n\n  private static async calculateTopScores(\n    scoresByDate: ScoresByDate,\n    dates: string[]\n  ): Promise<ScoresByDate> {\n    const topScores = {} as ScoresByDate;\n\n    for (let i = 0; i < dates.length; i++) {\n      const date = dates[i];\n      // TODO: make this a map to guarantee order\n      topScores[date] = {};\n\n      // Sort scores so we can get the top N and do an ordinal ranking for a bump chart\n      const sortedKeys = Object.keys(scoresByDate[date]).sort(function (a, b) {\n        return scoresByDate[date][b]! - scoresByDate[date][a]!;\n      });\n\n      for (let i = 0; i < settings.numberOfLanguages; i++) {\n        const languageName = sortedKeys[i];\n        topScores[date][languageName] = scoresByDate[date][languageName];\n      }\n    }\n\n    return topScores;\n  }\n\n  private async formatDataForChart(\n    topScores: ScoresByDate,\n    dates: string[]\n  ): Promise<SeriesData[]> {\n    const formattedScores = [] as SeriesData[];\n    const allTopLanguages = LanguagesChart.getAllTopLanguages(topScores);\n\n    for (const languageName of allTopLanguages) {\n      formattedScores.push({\n        title: languageName,\n        data: [],\n      });\n    }\n\n    for (let i = 0; i < dates.length; i++) {\n      const date = dates[i];\n\n      let formattedScoresIndex = 0;\n      for (let languageName of allTopLanguages) {\n        let score = 0;\n        let rank = 0;\n        if (topScores[date].hasOwnProperty(languageName)) {\n          score = topScores[date][languageName];\n          // TODO: this should be a map to guarantee order\n          rank = Object.keys(topScores[date]).indexOf(languageName) + 1;\n        }\n\n        formattedScores[formattedScoresIndex].data.push({\n          x: i,\n          // Use the ordinal number ranking for the chart data in order to create a bump chart\n          y: rank,\n          // TODO: don't add hintTitle and hintValue if score is 0\n          hintTitle: languageName,\n          // Add the custom score as a separate property so it can be used for hints on mouseover\n          hintValue: this.formatHintValue(score),\n        });\n        formattedScoresIndex++;\n      }\n    }\n\n    return formattedScores;\n  }\n\n  private static getAllTopLanguages(topScores: ScoresByDate): string[] {\n    const allTopLanguages = [] as string[];\n\n    for (const date in topScores) {\n      for (const languageName in topScores[date]) {\n        if (!allTopLanguages.includes(languageName)) {\n          allTopLanguages.push(languageName);\n        }\n      }\n    }\n\n    return allTopLanguages;\n  }\n}\n","import LanguagesChart from './LanguagesChart';\n\nexport default class TopLanguagesChart extends LanguagesChart {\n  protected calculateCustomScore(_oldValue: number, newValue: number) {\n    return newValue;\n  }\n\n  protected formatHintValue(hintValue: number): string {\n    return String(hintValue);\n  }\n}\n","import LanguagesChart from './LanguagesChart';\n\nexport default class FastestGrowingLanguagesChart extends LanguagesChart {\n  protected calculateCustomScore(oldValue: number, newValue: number) {\n    return (newValue / oldValue) * 100;\n  }\n\n  protected formatHintValue(hintValue: number): string {\n    return `${Math.round(hintValue)}% growth`;\n  }\n}\n","import LanguagesChart from './LanguagesChart';\n\nexport default class MostGrowthLanguages extends LanguagesChart {\n  protected calculateCustomScore(oldValue: number, newValue: number) {\n    return newValue - oldValue;\n  }\n\n  protected formatHintValue(hintValue: number): string {\n    return `+${hintValue}`;\n  }\n}\n","// Derived from https://github.com/d3/d3-shape/blob/master/src/curve/linear.js\n\nfunction point(that, x, y) {\n  that._context.bezierCurveTo(\n    that._prevX + (x - that._prevX) * that._compression,\n    that._prevY,\n    x - (x - that._prevX) * that._compression,\n    y,\n    x,\n    y\n  );\n}\n\n// I'm not sure if \"compression\" is the proper mathematical term...\n// A compression between 0 (straight lines) and 1 will give the best results\n// The closer you approach 1, the cleaner the lines will look but the more difficult it will be to distinguish between\n// multiple lines\nfunction D3SigmoidCurve(context, compression) {\n  this._context = context;\n  this._compression = compression;\n}\n\nD3SigmoidCurve.prototype = {\n  areaStart: function () {\n    this._line = 0;\n  },\n  areaEnd: function () {\n    this._line = NaN;\n  },\n  lineStart: function () {\n    this._point = 0;\n  },\n  lineEnd: function () {\n    if (this._line || (this._line !== 0 && this._point === 1))\n      this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function (x, y) {\n    x = +x;\n    y = +y;\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\n        break;\n      case 1:\n        this._point = 2; // proceed\n      // eslint-disable-next-line no-fallthrough\n      default:\n        point(this, x, y);\n        break;\n    }\n    this._prevX = x;\n    this._prevY = y;\n  },\n};\n\nexport default (function custom(compression) {\n  function cardinal(context) {\n    return new D3SigmoidCurve(context, compression);\n  }\n\n  cardinal.compression = function (compression) {\n    return custom(compression);\n  };\n\n  return cardinal;\n})(0.75);\n","import GitHubColors from 'github-colors';\nimport React, { useEffect, useState } from 'react';\nimport {\n  FlexibleWidthXYPlot,\n  Hint,\n  HorizontalGridLines,\n  LineMarkSeries,\n  RVTickFormat,\n  VerticalGridLines,\n  XAxis,\n  YAxis,\n} from 'react-vis';\n\nimport ChartFactory from '../helpers/ChartFactory';\nimport D3SigmoidCurve from '../helpers/D3SigmoidCurve';\nimport settings from '../settings.json';\n\nimport './Chart.css';\nimport '../../node_modules/react-vis/dist/style.css';\nimport { SeriesData, SeriesPointWithHint } from '../helpers/LanguagesChart';\n\nexport default function Chart(props: {\n  chartType: string;\n  intervalInMonths: number;\n}) {\n  const [chartData, setChartData] = useState([] as SeriesData[]);\n  const [dates, setDates] = useState([] as string[]);\n  const [hintValue, setHintValue] = useState(\n    null as SeriesPointWithHint | null\n  );\n  const [hoveredSeriesIndex, setHoveredSeriesIndex] = useState(\n    null as number | null\n  );\n  const [leftYAxisLabels, setLeftYAxisLabels] = useState([] as string[]);\n  const [rightYAxisLabels, setRightYAxisLabels] = useState([] as string[]);\n\n  useEffect(() => {\n    const loadChartData = async () => {\n      const chart = await ChartFactory.fromType(\n        props.chartType,\n        props.intervalInMonths\n      );\n\n      // TODO: just one object for chart data?\n      const dates = await chart.getDates();\n      const series = await chart.getSeries();\n\n      const leftYAxisLabels = generateLeftYAxisLabels(series);\n      const rightYAxisLabels = generateRightYAxisLabels(series);\n\n      setChartData(series);\n      setDates(dates);\n      setLeftYAxisLabels(leftYAxisLabels);\n      setRightYAxisLabels(rightYAxisLabels);\n    };\n\n    loadChartData();\n  }, [props.chartType, props.intervalInMonths]);\n\n  const generateLeftYAxisLabels = (series: SeriesData[]): string[] => {\n    return (\n      series\n        // Get just the data for the first date\n        .map((languageData) => languageData.data[0])\n        // Sort in reverse order because the y values are ordinal ranks (1 should be first, not 10)\n        .sort((a, b) => b.y - a.y)\n        // Drop everything else (x value, y value) and return just a list of hint titles\n        .map((languageData) => languageData && languageData.hintTitle)\n    );\n  };\n\n  // TODO: remove duplication here?\n  const generateRightYAxisLabels = (series: SeriesData[]): string[] => {\n    return (\n      series\n        // Get just the data for the last date\n        .map((languageData) => languageData.data[languageData.data.length - 1])\n        // Sort in reverse order because the y values are ordinal ranks (1 should be first, not 10)\n        .sort((a, b) => b.y - a.y)\n        // Drop everything else (x value, y value) and return just a list of hint titles\n        .map((languageData) => languageData && languageData.hintTitle)\n    );\n  };\n\n  const formatHint = (value: SeriesPointWithHint) => {\n    return [\n      {\n        title: value.hintTitle,\n        value: value.hintValue,\n      },\n    ];\n  };\n\n  const onValueMouseOut = () => {\n    setHintValue(null);\n    setHoveredSeriesIndex(null);\n  };\n\n  const onValueMouseOver = (value: SeriesPointWithHint, index: number) => {\n    setHintValue(value);\n    setHoveredSeriesIndex(index);\n  };\n\n  // TODO: could we just format the dates ahead of time and get rid of this method?\n  const xAxisLabelFormatter = (_value: number, index: number) => {\n    return formatDateForLabel(dates[index]);\n  };\n\n  const formatDateForLabel = (date: string) => {\n    return date.slice(0, 7);\n  };\n\n  const d3sigmoidcurve = D3SigmoidCurve.compression(0.5);\n\n  return (\n    <div className=\"chart-container\">\n      <div className=\"chart-content\">\n        <FlexibleWidthXYPlot\n          height={settings.numberOfLanguages * 49}\n          margin={{\n            left: 80,\n            right: 80,\n          }}\n          // Reverse the y scale since we're doing a bump chart\n          yDomain={[settings.numberOfLanguages, 1]}\n        >\n          <VerticalGridLines />\n          <HorizontalGridLines />\n          <XAxis\n            tickFormat={xAxisLabelFormatter as RVTickFormat}\n            tickTotal={dates.length}\n          />\n          <YAxis\n            orientation=\"left\"\n            tickFormat={\n              ((_v: number, i: number) => leftYAxisLabels[i]) as RVTickFormat\n            }\n          />\n          <YAxis\n            orientation=\"right\"\n            tickFormat={\n              ((_v: number, i: number) => rightYAxisLabels[i]) as RVTickFormat\n            }\n          />\n          {chartData.map((entry, i) => (\n            <LineMarkSeries\n              curve={d3sigmoidcurve}\n              // Don't draw zero values (they go way off the chart)\n              getNull={(d) => d.y !== 0}\n              key={entry.title}\n              color={GitHubColors.get(entry.title, true).color}\n              data={entry.data}\n              opacity={\n                hoveredSeriesIndex === null || hoveredSeriesIndex === i\n                  ? 1\n                  : 0.5\n              }\n              onValueMouseOut={onValueMouseOut}\n              onValueMouseOver={(datapoint) =>\n                onValueMouseOver(datapoint as SeriesPointWithHint, i)\n              }\n              strokeWidth={\n                hoveredSeriesIndex !== null && hoveredSeriesIndex === i\n                  ? 4\n                  : undefined\n              }\n              lineStyle={{ pointerEvents: 'none' }}\n            />\n          ))}\n          {hintValue && <Hint format={formatHint} value={hintValue} />}\n        </FlexibleWidthXYPlot>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Menu, MenuItemProps } from 'semantic-ui-react';\n\nexport default function ChartBottomMenu(props: {\n  intervalInMonths: number;\n  handleItemClick: (\n    event: React.MouseEvent<HTMLElement>,\n    data: MenuItemProps\n  ) => void;\n}) {\n  const intervalInMonths = props.intervalInMonths;\n\n  return (\n    <Menu secondary>\n      <Menu.Item\n        name=\"monthly\"\n        value=\"1\"\n        active={intervalInMonths === 1}\n        onClick={props.handleItemClick}\n      />\n      <Menu.Item\n        name=\"quarterly\"\n        value=\"3\"\n        active={intervalInMonths === 3}\n        onClick={props.handleItemClick}\n      />\n      <Menu.Item\n        name=\"yearly\"\n        value=\"12\"\n        active={intervalInMonths === 12}\n        onClick={props.handleItemClick}\n      />\n    </Menu>\n  );\n}\n","import React from 'react';\nimport { Menu, MenuItemProps } from 'semantic-ui-react';\n\nimport { ChartType } from '../helpers/ChartFactory';\n\nexport default function ChartTopMenu(props: {\n  chartType: string | undefined;\n  handleItemClick: (\n    event: React.MouseEvent<HTMLElement>,\n    data: MenuItemProps\n  ) => void;\n}) {\n  const chartType = props.chartType;\n\n  return (\n    <Menu secondary>\n      <Menu.Item\n        name={ChartType.FastestGrowth}\n        active={chartType === ChartType.FastestGrowth}\n        onClick={props.handleItemClick}\n      >\n        Fastest growth\n      </Menu.Item>\n      <Menu.Item\n        name={ChartType.MostGrowth}\n        active={chartType === ChartType.MostGrowth}\n        onClick={props.handleItemClick}\n      >\n        Most growth\n      </Menu.Item>\n      <Menu.Item\n        name={ChartType.TopLanguages}\n        active={chartType === ChartType.TopLanguages}\n        onClick={props.handleItemClick}\n      >\n        Top\n      </Menu.Item>\n    </Menu>\n  );\n}\n","import React, { useState } from 'react';\nimport { Container, Grid, Item, MenuItemProps } from 'semantic-ui-react';\n\nimport Chart from './Chart';\nimport ChartBottomMenu from './ChartBottomMenu';\nimport { ChartType } from '../helpers/ChartFactory';\nimport ChartTopMenu from './ChartTopMenu';\n\nimport './ChartGroup.css';\n\nexport default function ChartGroup() {\n  const [chartType, setChartType] = useState(ChartType.MostGrowth as string);\n  const [intervalInMonths, setIntervalInMonths] = useState(3);\n\n  const handleChartTypeChanged = (\n    _event: React.MouseEvent<HTMLElement>,\n    { name }: MenuItemProps\n  ) => {\n    if (name) {\n      setChartType(name);\n    }\n  };\n\n  const handleIntervalChanged = (\n    _event: React.MouseEvent<HTMLElement>,\n    { value }: MenuItemProps\n  ) => {\n    setIntervalInMonths(Number(value));\n  };\n\n  return (\n    <Container>\n      <Grid centered padded>\n        <Item.Group className=\"chart-group\">\n          <Item.Content>\n            <Grid centered padded>\n              <ChartTopMenu\n                chartType={chartType}\n                handleItemClick={handleChartTypeChanged}\n              />\n            </Grid>\n            <Chart chartType={chartType} intervalInMonths={intervalInMonths} />\n            <Grid centered padded>\n              <ChartBottomMenu\n                handleItemClick={handleIntervalChanged}\n                intervalInMonths={intervalInMonths}\n              />\n            </Grid>\n          </Item.Content>\n        </Item.Group>\n      </Grid>\n    </Container>\n  );\n}\n","import React, { Component } from 'react';\nimport { Container, Icon, Menu, Popup } from 'semantic-ui-react';\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <Menu attached borderless inverted>\n        <Container>\n          <Menu.Item fitted=\"horizontally\" header>\n            Programming language trends\n          </Menu.Item>\n\n          <Menu.Menu position=\"right\">\n            <Popup\n              on=\"click\"\n              trigger={\n                <Menu.Item icon>\n                  <Icon name=\"help circle\" size=\"big\" />\n                </Menu.Item>\n              }\n            >\n              <Popup.Content>\n                <h3>How the data is calculated</h3>\n                <p>\n                  First, a base numerical value for a given language and date is\n                  calculated by adding the total number of GitHub repositories\n                  to the total number of Stack Overflow tags for that language\n                  up to that day.\n                </p>\n                <h4>Fastest growth</h4>\n                <p>\n                  Languages with the highest percentage change compared to the\n                  previous date. Note that scores under a{' '}\n                  <a href=\"https://github.com/bmaupin/langtrends/blob/main/src/settings.json#L2\">\n                    certain threshold\n                  </a>{' '}\n                  are filtered out to reduce{' '}\n                  <a href=\"https://xkcd.com/1102/\">dubious claims</a>.\n                </p>\n                <h4>Most growth</h4>\n                <p>\n                  Languages with the highest numerical change compared to the\n                  previous date.\n                </p>\n                <h4>Top</h4>\n                <p>\n                  Languages with the total highest value for a particular given\n                  date.\n                </p>\n              </Popup.Content>\n            </Popup>\n            <Menu.Item href=\"https://github.com/bmaupin/langtrends\" icon>\n              <Icon name=\"github\" size=\"big\" />\n            </Menu.Item>\n          </Menu.Menu>\n        </Container>\n      </Menu>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport ChartGroup from './ChartGroup';\nimport Header from './Header';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <ChartGroup />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}